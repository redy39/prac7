  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in NormalFor: identifier is the start of several alternatives

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11 ###################################################################
  12    Adapted by Redy van Dyk && Scott Burnett - Group Q
  13    optional string output for halt statement
  14    warning for empty statement
  15    concatenation of string literals supported
  16    if-then-else and elseif statements supported
  17    do-while loop supported
  18    break statement supported
  19    for and for-in loops supported
  20    char type supported
  21    ++ and -- operators supported
  22    prevents modification of loop control variable in for-in statement
  23    length keyword supported
  24    */
  25 
  26   public static bool // tied to pragmas/directives
  27     debug    = false,
  28     listCode = false,
  29     warnings = true;
  30   static int progState = 0;
  31   const bool
  32     known = true;
  33 
  34   // This next method might better be located in the code generator.  Traditionally
  35   // it has been left in the ATG file, but that might change in future years
  36   //
  37   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  38   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  39   // to know this!
  40 
  41   static string Unescape(string s) {
  42   /* Replaces escape sequences in s by their Unicode values */
  43     StringBuilder buf = new StringBuilder();
  44     int i = 0;
  45     while (i < s.Length) {
  46       if (s[i] == '\\') {
  47         switch (s[i+1]) {
  48           case '\\': buf.Append('\\'); break;
  49           case '\'': buf.Append('\''); break;
  50           case '\"': buf.Append('\"'); break;
  51           case  'r': buf.Append('\r'); break;
  52           case  'n': buf.Append('\n'); break;
  53           case  't': buf.Append('\t'); break;
  54           case  'b': buf.Append('\b'); break;
  55           case  'f': buf.Append('\f'); break;
  56           default:   buf.Append(s[i+1]); break;
  57         }
  58         i += 2;
  59       }
  60       else {
  61         buf.Append(s[i]);
  62         i++;
  63       }
  64     }
  65     return buf.ToString();
  66   } // Unescape
  67 
  68   // the following is global for expediency (fewer parameters needed)
  69 
  70   static Label mainEntryPoint = new Label(!known);
  71 
  72   static bool IsArith(int type) {
  73     return type == Types.intType || type == Types.noType;
  74   } // IsArith
  75 
  76   static bool IsBool(int type) {
  77     return type == Types.boolType || type == Types.noType;
  78   } // IsBool
  79 
  80   static bool IsArray(int type) {
  81     return (type % 2) == 1;
  82   } // IsArray
  83 
  84   static bool IsChar(int type) {
  85     return (type == Types.charType);
  86   }
  87   
  88   static bool IsWritable(int type) {
  89     return (type == Types.intType 
  90         || type == Types.charType
  91         || type == Types.boolType);
  92   }
  93 
  94   static bool Compatible(int typeOne, int typeTwo) {
  95   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  96     return    typeOne == typeTwo
  97            || IsArith(typeOne) && IsArith(typeTwo)
  98            || typeOne == Types.noType
  99            || typeTwo == Types.noType
 100            || IsArray(typeOne) && typeTwo == Types.nullType
 101            || IsArray(typeTwo) && typeOne == Types.nullType;
 102   } // Compatible
 103 
 104   static bool Assignable(int typeOne, int typeTwo) {
 105   // Returns true if a variable of typeOne may be assigned a value of typeTwo
 106     return    typeOne == typeTwo
 107            || typeOne == Types.noType
 108            || typeTwo == Types.noType
 109            || IsArray(typeOne) && typeTwo == Types.nullType;
 110   } // Assignable
 111 
 112   static bool IsCall(out DesType des) {
 113   // Used as an LL(1) conflict resolver variable/function name
 114     Entry entry = Table.Find(la.val);
 115     des = new DesType(entry);
 116     return entry.kind == Kinds.Fun;
 117   } // IsCall
 118 
 119 
 120 /* -------------------------------------------------------------------------- */
 121 
 122 CHARACTERS
 123   lf         = CHR(10) .
 124   backslash  = CHR(92) .
 125   control    = CHR(0) .. CHR(31) .
 126   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 127   digit      = "0123456789" .
 128   stringCh   = ANY - '"' - control - backslash .
 129   charCh     = ANY - "'" - control - backslash .
 130   printable  = ANY - control .
 131 
 132 TOKENS
 133   identifier = letter { { "_" } (letter | digit) } .
 134   number     = digit { digit } .
 135   stringLit  = '"' { stringCh | backslash printable } '"' .
 136   charLit    = "'" ( charCh   | backslash printable ) "'" .
 137 
 138 PRAGMAS
 139   DebugOn     = "$D+" .                      (. debug = true; .)
 140   DebugOff    = "$D-" .                      (. debug = false; .)
 141   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 142   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 143   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 144   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 145   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 146   WarningsOn  = "$W+" .                      (. warnings = true; .)
 147   WarningsOff = "$W-" .                      (. warnings = false; .)
 148 
 149 COMMENTS FROM "//" TO lf
 150 COMMENTS FROM "/*" TO "*/"
 151 
 152 IGNORE CHR(9) .. CHR(13)
 153 
 154 PRODUCTIONS
 155 
 156   Parva
 157                                              (. CodeGen.FrameHeader();
 158                                                 // no arguments
 159                                                 CodeGen.Call(mainEntryPoint);
 160                                                 // forward, incomplete
 161                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 162   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 163                                                   SemError("missing Main function"); progState = 1; .)
 164   .
 165 
 166   FuncDeclaration      
 167                                              (. StackFrame frame = new StackFrame();
 168                                                 Entry function = new Entry(); .)
 169   =  "void" Ident<out function.name>  
 170                                              (. function.kind = Kinds.Fun;
 171                                                 function.type = Types.voidType;
 172                                                 function.nParams = 0;
 173                                                 function.firstParam = null;
 174                                                 function.entryPoint = new Label(known);
 175                                                 Table.Insert(function);
 176                                                 Table.OpenScope(); .)
 177      "(" FormalParameters<function> ")"
 178                                              (. frame.size = CodeGen.headerSize + 
 179                                                 function.nParams;
 180                                                 if (function.name.ToUpper().Equals("MAIN")
 181                                                 && !mainEntryPoint.IsDefined()
 182                                                 && function.nParams == 0) {
 183                                                   mainEntryPoint.Here(); } .)
 184      Body<frame>                             (. Table.CloseScope(); .)
 185   .
 186 
 187   FormalParameters<Entry func>               (. Entry param; .)
 188   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 189       { WEAK "," OneParam<out param, func> }
 190     ] .
 191 
 192   OneParam<out Entry param, Entry func>
 193                                              (. param = new Entry();
 194                                                 param.kind = Kinds.Var;
 195                                                 param.offset = CodeGen.headerSize + func.nParams;
 196                                                 func.nParams++; .)
 197   =  Type<out param.type>
 198      Ident<out param.name>                   (. Table.Insert(param); .)
 199   .
 200 
 201   Body<StackFrame frame>                     (. Label Lbend = new Label(!known); 
 202                                                 Label DSPLabel = new Label(known);
 203                                                 int sizeMark = frame.size;
 204                                                 CodeGen.OpenStackFrame(0); .)
 205   =  "{" { Statement<frame, Lbend> }
 206      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 207                                                 Lbend.Here();
 208                                                 CodeGen.LeaveVoidFunction(); .)
 209 .                                        
 210 
 211   Statement<StackFrame frame, Label label>
 212   =  SYNC (   Block<frame, label>
 213             | ConstDeclarations
 214             | VarDeclarations<frame>
 215             | AssignmentOrCall
 216             | IfStatement<frame, label>
 217             | WhileStatement<frame>
 218             | DoWhileStatment<frame>
 219             | ForStatement<frame>
 220             | HaltStatement
 221             | ReturnStatement
 222             | BreakStatement<label>
 223             | ReadStatement
 224             | WriteStatement
 225             | ";"                            (. Warning("possible unintended empty statement"); .)
 226           ) .
 227 
 228   Block<StackFrame frame, Label Lbend>
 229   =                                          (. Table.OpenScope();
 230                                                 bool empty = true;  .)
 231      "{" { Statement<frame, Lbend> }                (. empty = false; .)
 232      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 233                                                 Table.CloseScope(); .)
 234   .
 235 
 236   ConstDeclarations
 237   = "const" OneConst { WEAK "," OneConst }
 238     WEAK ";"
 239   .
 240 
 241   OneConst                                   (. Entry constant = new Entry();
 242                                                 ConstRec con; .)
 243   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 244      AssignOp Constant<out con>              (. constant.value = con.value;
 245                                                 constant.type = con.type;
 246                                                 Table.Insert(constant); .)
 247   .
 248 
 249   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 250   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 251     | CharConst<out con.value>               (. con.type = Types.charType; .)
 252     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 253     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 254     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 255   .
 256 
 257   VarDeclarations<StackFrame frame>          (. int type; .)
 258   =  Type<out type>                          
 259      VarList<frame, type>
 260      WEAK ";"
 261   .
 262 
 263   Type<out int type>                         
 264   =   BasicType<out type>
 265        [ "[]"                                (. type++; .)
 266        ] .
 267 
 268   BasicType<out int type>                    (. type = Types.noType; .)
 269   =   "int"                                  (. type = Types.intType; .)
 270     | "bool"                                 (. type = Types.boolType; .)
 271     | "char"                                 (. type = Types.charType; .)
 272   .
 273 
 274   VarList<StackFrame frame, int type>
 275   =  OneVar<frame, type>
 276      { WEAK "," OneVar<frame, type> }
 277   .
 278 
 279   OneVar<StackFrame frame, int type>         (. int expType;
 280                                                 Entry var = new Entry(); .)
 281   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 282                                                 var.type = type;
 283                                                 var.offset = frame.size;
 284                                                 frame.size++; .)
 285      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 286        Expression<out expType>               (. if (!Assignable(var.type, expType))
 287                                                   SemError("incompatible types in assignment");
 288                                                 progState = 1;
 289                                                 CodeGen.Assign(var.type); .)
 290      ]                                       (. Table.Insert(var); .)
 291   .
 292 
 293   AssignmentOrCall                           (. int expType, op;
 294                                                 DesType des; .)
 295   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 296          identifier                          (. CodeGen.FrameHeader(); .)
 297          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 298      |  ( Designator<out des>                (. if (des.entry.kind != Kinds.Var)
 299                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 300                                                 if (des.entry.locked)
 301                                                   SemError("cannot modify loop control variable");
 302                                                 progState = 1; .)
 303           ( AssignOp
 304             Expression<out expType>          (. if (!Assignable(des.type, expType))
 305                                                   SemError("incompatible types in assignment");
 306                                                 progState = 1;
 307                                                 CodeGen.Assign(des.type); .)
 308             | IncOp<out op>                  (. if (!IsArith(des.type) && !IsChar(des.type))
 309                                                   SemError("cannot incriment / decrement this type");
 310                                                 progState = 1;
 311                                                 CodeGen.Dupicate();
 312                                                 CodeGen.Dereference();
 313                                                 CodeGen.LoadConstant(1); 
 314                                                 CodeGen.BinaryOp(op);
 315                                                 if (IsChar(des.type)) {
 316                                                   // wrap around for charType
 317                                                   CodeGen.LoadConstant(PVM.maxChar);
 318                                                   CodeGen.BinaryOp(CodeGen.add);
 319                                                   CodeGen.LoadConstant(PVM.maxChar);
 320                                                   CodeGen.BinaryOp(CodeGen.rem); }
 321                                                 CodeGen.Assign(des.type); .)
 322           )
 323         | IncOp<out op>
 324           Designator<out des>                (. if (des.entry.kind != Kinds.Var)
 325                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 326                                                 if (des.entry.locked)
 327                                                   SemError("cannot modify loop control variable");
 328                                                 if (!IsArith(des.type) && !IsChar(des.type))
 329                                                   SemError("cannot incriment / decrement this type");
 330                                                 progState = 1;
 331                                                 CodeGen.Dupicate();
 332                                                 CodeGen.Dereference();
 333                                                 CodeGen.LoadConstant(1); 
 334                                                 CodeGen.BinaryOp(op);
 335                                                 if (IsChar(des.type)) {
 336                                                   // wrap around for charType
 337                                                   CodeGen.LoadConstant(PVM.maxChar);
 338                                                   CodeGen.BinaryOp(CodeGen.add);
 339                                                   CodeGen.LoadConstant(PVM.maxChar);
 340                                                   CodeGen.BinaryOp(CodeGen.rem); }
 341                                                 CodeGen.Assign(des.type); .)
 342         )
 343      ) WEAK ";"
 344   .
 345 
 346   Arguments<DesType des>                     (. int argCount = 0;
 347                                                 Entry fp = des.entry.firstParam; .)
 348   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 349        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 350        }
 351      ]                                       (. if (argCount != des.entry.nParams)
 352                                                   SemError("wrong number of arguments"); 
 353                                                 progState = 1; .)
 354   .
 355 
 356   OneArg<Entry fp>                           (. int argType; .)
 357   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 358                                                   SemError("argument type mismatch"); 
 359                                                 progState = 1; .)
 360      )
 361   .
 362 
 363   Designator<out DesType des>                (. string name;
 364                                                 int indexType; .)
 365   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 366                                                 if (!entry.declared)
 367                                                   SemError("undeclared identifier");
 368                                                 progState = 1;
 369                                                 des = new DesType(entry);
 370                                                 if (entry.kind == Kinds.Var)
 371                                                   CodeGen.LoadAddress(entry); .)
 372      [     "["                               (. if (IsArray(des.type)) des.type--;
 373                                                 else { SemError("unexpected subscript");
 374                                                   progState = 1; }
 375                                                 if (des.entry.kind != Kinds.Var) {
 376                                                   SemError("unexpected subscript");
 377                                                   progState = 1; }
 378                                                 CodeGen.Dereference(); .)
 379               Expression<out indexType>      (. if (!IsArith(indexType)) {
 380                                                   SemError("invalid subscript type");
 381                                                 progState = 1; }
 382                                                 CodeGen.Index(); .)
 383            "]"
 384      ]
 385   .
 386 
 387   IfStatement<StackFrame frame, Label endBlock>
 388                                              (. Label falseLabel = new Label(!known),
 389                                                         endElse = new Label(!known); .)
 390   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 391         ["then"] Statement<frame, endBlock>  (.   CodeGen.Branch(endElse);
 392                                                 falseLabel.Here(); .)
 393      [ "else" Statement<frame, endBlock>
 394      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 395   .
 396 
 397   ElseIfStatement<StackFrame frame, Label endBlock>
 398                                              (. Label falseLabel = new Label(!known),
 399                                                         endElse = new Label(!known); .)
 400   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 401         ["then"] Statement<frame, endBlock>  (. CodeGen.Branch(endElse);
 402                                                 falseLabel.Here(); .)
 403      [ "else" Statement<frame, endBlock>
 404      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 405   .
 406 
 407   WhileStatement<StackFrame frame>
 408                                              (. Label loopExit  = new Label(!known);
 409                                                 Label loopStart = new Label(known); .)
 410   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 411      Statement<frame, loopExit>              (. CodeGen.Branch(loopStart);
 412                                                 loopExit.Here(); .)
 413   .
 414   
 415   DoWhileStatment<StackFrame frame>
 416                                              (. Label loopExit  = new Label(!known); 
 417                                                 Label loopStart = new Label(known); .)
 418   = "do" Statement<frame, loopExit>
 419     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 420                                              (. CodeGen.Branch(loopStart); .)
 421                                              (. loopExit.Here(); .)
 422  .
 423  
 424   ForStatement<StackFrame frame>
 425                                              
 426   = "for" ( NormalFor<frame> | FancyFor<frame> ) .
 427     
 428   NormalFor<StackFrame frame>                (. Label loopExit  = new Label(!known); 
 429                                                 Label loopStart = new Label(!known); .)
 430     
 431   =  
 432     "("                                      (. string name = ""; .)
 433     ( AssignmentOrCall    
 434     | Ident<out name> WEAK ";"               (. if(Table.Find(name) == null)
 435                                                   SemError("Undeclared Identifier: " + name); .)
 436     | VarDeclarations<frame> )
 437                                              (. loopStart.Here(); .)
 438     Condition                                (. CodeGen.BranchFalse(loopExit); .)
 439     WEAK ";"
 440     AssignmentOrCall
 441     ")"
 442     Statement<frame, loopExit>               (. CodeGen.Branch(loopStart);
 443                                                 loopExit.Here(); .)
 444     .
 445 
 446     FancyFor<StackFrame frame>               (. Label loopExit  = new Label(!known);
 447                                                 Label stmStart  = new Label(!known); .)
 448     =                                        (. string name = ""; Entry e; .)
 449     Ident<out name>                          (. e = Table.Find(name);
 450                                                 if(e == null)
 451                                                   SemError("Undeclared Identifier: " + name); .)
 452     "in"                                     (. int exprType = Types.noType; .)
 453     "("
 454                                              (. CodeGen.LoadAddress(e); .)
 455     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!");
 456                                                 CodeGen.Assign(exprType);
 457                                                 CodeGen.JumpAndLink(stmStart); .)
 458     { ","
 459                                              (. CodeGen.LoadAddress(e); .)
 460     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!");
 461                                                 CodeGen.Assign(exprType);
 462                                                 CodeGen.JumpAndLink(stmStart); .)
 463     }                                        (. CodeGen.Branch(loopExit); .)
 464     ")"
 465                                              (. stmStart.Here();
 466                                                 e.locked = true; .)
 467     Statement<frame, loopExit>               (. CodeGen.JumpTOS();
 468                                                 e.locked = false;
 469                                                 loopExit.Here(); .)
 470   .
 471 
 472   HaltStatement
 473   =  "halt"
 474      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 475      WEAK ";"
 476   .
 477 
 478   ReturnStatement
 479   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 480     WEAK ";"
 481   .
 482 
 483   BreakStatement<Label Lb>
 484   = "break"
 485     WEAK ";"                                 (. CodeGen.Branch(Lb); .)
 486   .
 487 
 488   ReadStatement
 489   = (   "read"     "("   ReadList   ")"
 490       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 491     )
 492     WEAK ";"
 493   .
 494 
 495   ReadList
 496   = ReadElement { WEAK "," ReadElement }
 497   .
 498 
 499   ReadElement                                (. string str;
 500                                                 DesType des; .)
 501   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 502     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 503                                                   SemError("wrong kind of identifier");
 504                                                   progState = 1; }
 505                                                 switch (des.type) {
 506                                                   case Types.intType:
 507                                                   case Types.charType:
 508                                                   case Types.boolType:
 509                                                     CodeGen.Read(des.type); break;
 510                                                   default:
 511                                                     SemError("cannot read this type"); progState = 1; break;
 512                                                 } .)
 513   .
 514 
 515   WriteStatement
 516   = (   "write"     "("   WriteList   ")"
 517       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 518     )
 519     WEAK ";"
 520   .
 521 
 522   WriteList
 523   = WriteElement { WEAK "," WriteElement }
 524   .
 525 
 526   WriteElement                               (. int expType;
 527                                                 string str; .)
 528   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 529     | Expression<out expType>                (. if (!IsWritable(expType)) {
 530                                                   SemError("cannot write this type"); progState = 1; }
 531                                                 switch (expType) {
 532                                                   case Types.intType:
 533                                                   case Types.boolType:
 534                                                   case Types.charType:
 535                                                     CodeGen.Write(expType); break;
 536                                                   default:
 537                                                     break;
 538                                                 } .)
 539   .
 540 
 541   Condition                                  (. int type; .)
 542   =  Expression<out type>                    (. if (!IsBool(type)) {
 543                                                   SemError("Boolean expression needed"); progState = 1; } .)
 544   .
 545 
 546   Expression<out int type>                   (. int type2;
 547                                                 int op;
 548                                                 bool comparable; .)
 549   =  AddExp<out type>
 550      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 551                                                   case CodeGen.ceq: case CodeGen.cne:
 552                                                     comparable = Compatible(type, type2);
 553                                                     break;
 554                                                   default:
 555                                                     comparable = (IsArith(type) || IsChar(type)) 
 556                                                               && (IsArith(type2) || IsChar(type2));
 557                                                     break;
 558                                                 }
 559                                                 if (!comparable) {
 560                                                   SemError("incomparable operands");
 561                                                   progState = 1; }
 562                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 563      ]
 564   .
 565 
 566   AddExp<out int type>                       (. int type2;
 567                                                 int op;
 568                                                 Label shortcircuit = new Label(!known); .)
 569   =                                          (. type = Types.noType; .)
 570      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 571                                                   SemError("arithmetic operand needed"); 
 572                                                   progState = 1; } .)
 573        | "-" Term<out type>                  (. if (!IsArith(type)) {
 574                                                   SemError("arithmetic operand needed");
 575                                                   progState = 1; }
 576                                                 CodeGen.NegateInteger(); .)
 577        | Term<out type>
 578      )
 579      { AddOp<out op>                         (. if (op == CodeGen.or)
 580                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 581        Term<out type2>                       (. switch (op) {
 582                                                   case CodeGen.or:
 583                                                     if (!IsBool(type) || !IsBool(type2)) {
 584                                                       SemError("boolean operands needed"); 
 585                                                       progState = 1; }
 586                                                     type = Types.boolType;
 587                                                     break;
 588                                                   case CodeGen.add:
 589                                                     if((!IsArith(type) && !IsChar(type))
 590                                                     || (!IsArith(type2) && !IsChar(type2))) {
 591                                                       SemError("operand must be of type int or type char");
 592                                                       progState = 1;
 593                                                     }
 594                                                     type = IsChar(type) && IsChar(type2) ? Types.charType : Types.intType; 
 595                                                     CodeGen.BinaryOp(op);
 596                                                     if (IsChar(type)) {
 597                                                       // wrap around for charType
 598                                                       CodeGen.LoadConstant(PVM.maxChar);
 599                                                       CodeGen.BinaryOp(CodeGen.add);
 600                                                       CodeGen.LoadConstant(PVM.maxChar);
 601                                                       CodeGen.BinaryOp(CodeGen.rem); }
 602                                                     break;
 603                                                   default:
 604                                                     if((!IsArith(type) && !IsChar(type))
 605                                                     || (!IsArith(type2) && !IsChar(type2))) {
 606                                                       SemError("arithmetic operands needed");
 607                                                       type = Types.noType;
 608                                                       progState = 1;
 609                                                     }
 610                                                     type = Types.intType;
 611                                                     CodeGen.BinaryOp(op);
 612                                                     break;
 613                                                 } .)
 614      }                                       (. shortcircuit.Here(); .)
 615   .
 616 
 617   Term<out int type>                         (. int type2;
 618                                                 int op;
 619                                                 Label shortcircuit = new Label(!known); .)
 620   =  Factor<out type>
 621      { MulOp<out op>                         (. if (op == CodeGen.and)
 622                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 623        Factor<out type2>                     (. switch (op) {
 624                                                   case CodeGen.and:
 625                                                     if (!IsBool(type) || !IsBool(type2)) {
 626                                                       SemError("boolean operands needed"); progState = 1; }
 627                                                     type = Types.boolType;
 628                                                     break;
 629                                                   default:
 630                                                     if (!IsArith(type) || !IsArith(type2)) {
 631                                                       SemError("arithmetic operands needed");
 632                                                       type = Types.noType;
 633                                                       progState = 1;
 634                                                     }
 635                                                     CodeGen.BinaryOp(op);
 636                                                     break;
 637                                                 } .)
 638      }                                       (. shortcircuit.Here(); .)
 639   .
 640 
 641   Factor<out int type>                       (. type = Types.noType;
 642                                                 int size;
 643                                                 DesType des;
 644                                                 ConstRec con; .)
 645   =    Designator<out des>                   (. type = des.type;
 646                                                 switch (des.entry.kind) {
 647                                                   case Kinds.Var:
 648                                                     CodeGen.Dereference();
 649                                                     break;
 650                                                   case Kinds.Con:
 651                                                     CodeGen.LoadConstant(des.entry.value);
 652                                                     break;
 653                                                   default:
 654                                                     SemError("wrong kind of identifier");
 655                                                     progState = 1;
 656                                                     break;
 657                                                 } .)
 658                                         
 659      | Constant<out con>                     (. type = con.type;
 660                                                 CodeGen.LoadConstant(con.value); .)
 661      | "new" BasicType<out type>             (. type++; .)
 662          "[" Expression<out size>            (. if (!IsArith(size)){
 663                                                   SemError("array size must be integer");
 664                                                   progState = 1; }
 665                                                 CodeGen.Allocate(); .)
 666          "]"
 667      | "length"
 668          "(" Designator<out des> ")"         (. if (!IsArray(des.type))
 669                                                   SemError("operand must be of array type"); 
 670                                                 type = Types.intType; 
 671                                                 CodeGen.Dereference();
 672                                                 CodeGen.Dereference(); .)
 673      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 674                                                 else CodeGen.NegateBoolean();
 675                                                 type = Types.boolType; .)
 676      | "(" Expression<out type> ")"
 677   .
 678 
 679   AddOp<out int op>                          (. op = CodeGen.nop; .)
 680   =    "+"                                   (. op = CodeGen.add; .)
 681      | "-"                                   (. op = CodeGen.sub; .)
 682      | "||"                                  (. op = CodeGen.or;  .)
 683   .
 684 
 685   MulOp<out int op>                          (. op = CodeGen.nop; .)
 686   =    "*"                                   (. op = CodeGen.mul; .)
 687      | "/"                                   (. op = CodeGen.div; .)
 688      | "%"                                   (. op = CodeGen.rem; .)
 689      | "&&"                                  (. op = CodeGen.and; .)
 690   .
 691 
 692   RelOp<out int op>                          (. op = CodeGen.nop; .)
 693   =    "=="                                  (. op = CodeGen.ceq; .)
 694      | "!="                                  (. op = CodeGen.cne; .)
 695      | "<"                                   (. op = CodeGen.clt; .)
 696      | "<="                                  (. op = CodeGen.cle; .)
 697      | ">"                                   (. op = CodeGen.cgt; .)
 698      | ">="                                  (. op = CodeGen.cge; .)
 699   .
 700 
 701   IncOp<out int op>                          (. op = CodeGen.nop; .)
 702   =    "++"                                  (. op = CodeGen.add; .)
 703      | "--"                                  (. op = CodeGen.sub; .)
 704   .
 705 
 706   AssignOp = "=" .
 707 
 708   Ident<out string name>
 709   =  identifier                              (. name = token.val; .)
 710   .
 711 
 712   StringConst<out string str>
 713   =  stringLit                               (. str = token.val; .)
 714      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 715      }
 716                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 717   .
 718 
 719   CharConst<out int value>
 720   =  charLit                                 (. string str = token.val;
 721                                                 str = Unescape(str.Substring(1, str.Length - 2));
 722                                                 value = (int) str[0]; .)
 723   .
 724 
 725   IntConst<out int value>
 726   =  number                                  (. try {
 727                                                   value = Convert.ToInt32(token.val);
 728                                                 } catch (Exception) {
 729                                                   value = 0; SemError("number out of range"); progState = 1;
 730                                                 } .)
 731   .
 732 
 733 END Parva.
 734 

0 errors detected
7 warnings detected

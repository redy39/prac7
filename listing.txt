  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16   static int progState = 0;
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool Compatible(int typeOne, int typeTwo) {
  71   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  72     return    typeOne == typeTwo
  73            || IsArith(typeOne) && IsArith(typeTwo)
  74            || typeOne == Types.noType
  75            || typeTwo == Types.noType
  76            || IsArray(typeOne) && typeTwo == Types.nullType
  77            || IsArray(typeTwo) && typeOne == Types.nullType;
  78   } // Compatible
  79 
  80   static bool Assignable(int typeOne, int typeTwo) {
  81   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  82     return    typeOne == typeTwo
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType;
  86   } // Assignable
  87 
  88   static bool IsCall(out DesType des) {
  89   // Used as an LL(1) conflict resolver variable/function name
  90     Entry entry = Table.Find(la.val);
  91     des = new DesType(entry);
  92     return entry.kind == Kinds.Fun;
  93   } // IsCall
  94 
  95 
  96 /* -------------------------------------------------------------------------- */
  97 
  98 CHARACTERS
  99   lf         = CHR(10) .
 100   backslash  = CHR(92) .
 101   control    = CHR(0) .. CHR(31) .
 102   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 103   digit      = "0123456789" .
 104   stringCh   = ANY - '"' - control - backslash .
 105   charCh     = ANY - "'" - control - backslash .
 106   printable  = ANY - control .
 107 
 108 TOKENS
 109   identifier = letter { { "_" } (letter | digit) } .
 110   number     = digit { digit } .
 111   stringLit  = '"' { stringCh | backslash printable } '"' .
 112   charLit    = "'" ( charCh   | backslash printable ) "'" .
 113 
 114 PRAGMAS
 115   DebugOn     = "$D+" .                      (. debug = true; .)
 116   DebugOff    = "$D-" .                      (. debug = false; .)
 117   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 118   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 119   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 120   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 121   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 122   WarningsOn  = "$W+" .                      (. warnings = true; .)
 123   WarningsOff = "$W-" .                      (. warnings = false; .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                                              (. CodeGen.FrameHeader();
 134                                                 // no arguments
 135                                                 CodeGen.Call(mainEntryPoint);
 136                                                 // forward, incomplete
 137                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 138   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 139                                                   SemError("missing Main function"); progState = 1; .)
 140   .
 141 
 142   FuncDeclaration      
 143                                              (. StackFrame frame = new StackFrame();
 144                                                 Entry function = new Entry(); .)
 145   =  "void" Ident<out function.name>  
 146                                              (. function.kind = Kinds.Fun;
 147                                                 function.type = Types.voidType;
 148                                                 function.nParams = 0;
 149                                                 function.firstParam = null;
 150                                                 function.entryPoint = new Label(known);
 151                                                 Table.Insert(function);
 152                                                 Table.OpenScope(); .)
 153      "(" FormalParameters<function> ")"
 154                                              (. frame.size = CodeGen.headerSize + 
 155                                                 function.nParams;
 156                                                 if (function.name.ToUpper().Equals("MAIN")
 157                                                 && !mainEntryPoint.IsDefined()
 158                                                 && function.nParams == 0) {
 159                                                   mainEntryPoint.Here(); } .)
 160      Body<frame>                             (. Table.CloseScope(); .)
 161   .
 162 
 163   FormalParameters<Entry func>               (. Entry param; .)
 164   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 165       { WEAK "," OneParam<out param, func> }
 166     ] .
 167 
 168   OneParam<out Entry param, Entry func>
 169                                              (. param = new Entry();
 170                                                 param.kind = Kinds.Var;
 171                                                 param.offset = CodeGen.headerSize + func.nParams;
 172                                                 func.nParams++; .)
 173   =  Type<out param.type>
 174      Ident<out param.name>                   (. Table.Insert(param); .)
 175   .
 176 
 177   Body<StackFrame frame>                     (. Label DSPLabel = new Label(known);
 178                                                 int sizeMark = frame.size;
 179                                                 CodeGen.OpenStackFrame(0); .)
 180   =  "{" { Statement<frame> }
 181      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 182                                                 CodeGen.LeaveVoidFunction(); .)
 183 .
 184 
 185   Statement<StackFrame frame>
 186   =  SYNC (   Block<frame>
 187             | ConstDeclarations
 188             | VarDeclarations<frame>
 189             | AssignmentOrCall
 190             | IfStatement<frame>
 191             | WhileStatement<frame>
 192             | HaltStatement
 193             | ReturnStatement
 194             | BreakStatement
 195             | ReadStatement
 196             | WriteStatement
 197             | ";"                            (. Warning("possible unintended empty statement"); .)
 198           ) .
 199 
 200   Block<StackFrame frame>
 201   =                                          (. Table.OpenScope();
 202                                                 bool empty = true;  .)
 203      "{" { Statement<frame> }                (. empty = false; .)
 204      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 205                                                 Table.CloseScope(); .)
 206   .
 207 
 208   ConstDeclarations
 209   = "const" OneConst { WEAK "," OneConst }
 210     WEAK ";"
 211   .
 212 
 213   OneConst                                   (. Entry constant = new Entry();
 214                                                 ConstRec con; .)
 215   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 216      AssignOp Constant<out con>              (. constant.value = con.value;
 217                                                 constant.type = con.type;
 218                                                 Table.Insert(constant); .)
 219   .
 220 
 221   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 222   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 223     | CharConst<out con.value>               (. con.type = Types.intType; .)
 224     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 225     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 226     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 227   .
 228 
 229   VarDeclarations<StackFrame frame>          (. int type; .)
 230   =  Type<out type>                          
 231      VarList<frame, type>
 232      WEAK ";"
 233   .
 234 
 235   Type<out int type>                         
 236   =   BasicType<out type>
 237        [ "[]"                                (. type++; .)
 238        ] .
 239 
 240   BasicType<out int type>                    (. type = Types.noType; .)
 241   =   "int"                                  (. type = Types.intType; .)
 242     | "bool"                                 (. type = Types.boolType; .)
 243   .
 244 
 245 
 246   VarList<StackFrame frame, int type>
 247   =  OneVar<frame, type>
 248      { WEAK "," OneVar<frame, type> }
 249   .
 250 
 251   OneVar<StackFrame frame, int type>         (. int expType;
 252                                                 Entry var = new Entry(); .)
 253   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 254                                                 var.type = type;
 255                                                 var.offset = frame.size;
 256                                                 frame.size++; .)
 257      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 258        Expression<out expType>               (. if (!Assignable(var.type, expType))
 259                                                   SemError("incompatible types in assignment");
 260                                                 progState = 1;
 261                                                 CodeGen.Assign(var.type); .)
 262      ]                                       (. Table.Insert(var); .)
 263   .
 264 
 265 
 266   AssignmentOrCall                           (. int expType;
 267                                                 DesType des; .)
 268   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 269          identifier                          (. CodeGen.FrameHeader(); .)
 270          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 271       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 272                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 273                                                 progState = 1; .)
 274          AssignOp
 275          Expression<out expType>             (. if (!Assignable(des.type, expType))
 276                                                   SemError("incompatible types in assignment");
 277                                                 progState = 1;
 278                                                 CodeGen.Assign(des.type); .)
 279      ) WEAK ";"
 280   .
 281 
 282   Arguments<DesType des>                     (. int argCount = 0;
 283                                                 Entry fp = des.entry.firstParam; .)
 284   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 285        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 286        }
 287      ]                                       (. if (argCount != des.entry.nParams)
 288                                                   SemError("wrong number of arguments"); 
 289                                                 progState = 1; .)
 290   .
 291 
 292   OneArg<Entry fp>                           (. int argType; .)
 293   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 294                                                   SemError("argument type mismatch"); 
 295                                                 progState = 1; .)
 296      )
 297   .
 298 
 299   Designator<out DesType des>                (. string name;
 300                                                 int indexType; .)
 301   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 302                                                 if (!entry.declared)
 303                                                   SemError("undeclared identifier");
 304                                                 progState = 1;
 305                                                 des = new DesType(entry);
 306                                                 if (entry.kind == Kinds.Var)
 307                                                   CodeGen.LoadAddress(entry); .)
 308      [     "["                               (. if (IsArray(des.type)) des.type--;
 309                                                 else { SemError("unexpected subscript");
 310                                                   progState = 1; }
 311                                                 if (des.entry.kind != Kinds.Var) {
 312                                                   SemError("unexpected subscript");
 313                                                   progState = 1; }
 314                                                 CodeGen.Dereference(); .)
 315               Expression<out indexType>      (. if (!IsArith(indexType)) {
 316                                                   SemError("invalid subscript type");
 317                                                 progState = 1; }
 318                                                 CodeGen.Index(); .)
 319            "]"
 320      ]
 321   .
 322 
 323   IfStatement<StackFrame frame>
 324                                              (. Label falseLabel = new Label(!known),
 325                                                         endElse = new Label(!known); .)
 326   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 327         ["then"] Statement<frame>            (. CodeGen.Branch(endElse);
 328                                                 falseLabel.Here(); .)
 329      [ "else" Statement<frame>
 330      | ElseIfStatement<frame> ]              (. endElse.Here(); .)
 331   .
 332 
 333   ElseIfStatement<StackFrame frame>
 334                                              (. Label falseLabel = new Label(!known),
 335                                                         endElse = new Label(!known); .)
 336   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 337         ["then"] Statement<frame>            (. CodeGen.Branch(endElse);
 338                                                 falseLabel.Here(); .)
 339      [ "else" Statement<frame>
 340      | ElseIfStatement<frame> ]              (. endElse.Here(); .)
 341   .
 342 
 343   WhileStatement<StackFrame frame>
 344                                              (. Label loopExit  = new Label(!known);
 345                                                 Label loopStart = new Label(known); .)
 346   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 347      Statement<frame>                        (. CodeGen.Branch(loopStart);
 348                                                 loopExit.Here(); .)
 349   .
 350 
 351   HaltStatement
 352   =  "halt"
 353      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 354      WEAK ";"
 355   .
 356 
 357   ReturnStatement
 358   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 359     WEAK ";"
 360   .
 361 
 362   BreakStatement
 363   = "break"
 364     WEAK ";"
 365   .
 366 
 367   ReadStatement
 368   = (   "read"     "("   ReadList   ")"
 369       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 370     )
 371     WEAK ";"
 372   .
 373 
 374   ReadList
 375   = ReadElement { WEAK "," ReadElement }
 376   .
 377 
 378   ReadElement                                (. string str;
 379                                                 DesType des; .)
 380   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 381     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 382                                                   SemError("wrong kind of identifier");
 383                                                   progState = 1; }
 384                                                 switch (des.type) {
 385                                                   case Types.intType:
 386                                                   case Types.boolType:
 387                                                     CodeGen.Read(des.type); break;
 388                                                   default:
 389                                                     SemError("cannot read this type"); progState = 1; break;
 390                                                 } .)
 391   .
 392 
 393   WriteStatement
 394   = (   "write"     "("   WriteList   ")"
 395       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 396     )
 397     WEAK ";"
 398   .
 399 
 400   WriteList
 401   = WriteElement { WEAK "," WriteElement }
 402   .
 403 
 404   WriteElement                               (. int expType;
 405                                                 string str; .)
 406   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 407     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType)) {
 408                                                   SemError("cannot write this type"); progState = 1; }
 409                                                 switch (expType) {
 410                                                   case Types.intType:
 411                                                   case Types.boolType:
 412                                                     CodeGen.Write(expType); break;
 413                                                   default:
 414                                                     break;
 415                                                 } .)
 416   .
 417 
 418   Condition                                  (. int type; .)
 419   =  Expression<out type>                    (. if (!IsBool(type)) {
 420                                                   SemError("Boolean expression needed"); progState = 1; } .)
 421   .
 422 
 423   Expression<out int type>                   (. int type2;
 424                                                 int op;
 425                                                 bool comparable; .)
 426   =  AddExp<out type>
 427      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 428                                                   case CodeGen.ceq: case CodeGen.cne:
 429                                                     comparable = Compatible(type, type2);
 430                                                     break;
 431                                                   default:
 432                                                     comparable = IsArith(type) && IsArith(type2);
 433                                                     break;
 434                                                 }
 435                                                 if (!comparable) {
 436                                                   SemError("incomparable operands");
 437                                                   progState = 1; }
 438                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 439      ]
 440   .
 441 
 442   AddExp<out int type>                       (. int type2;
 443                                                 int op;
 444                                                 Label shortcircuit = new Label(!known); .)
 445   =                                          (. type = Types.noType; .)
 446      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 447                                                   SemError("arithmetic operand needed"); 
 448                                                   progState = 1; } .)
 449        | "-" Term<out type>                  (. if (!IsArith(type)) {
 450                                                   SemError("arithmetic operand needed");
 451                                                   progState = 1; }
 452                                                 CodeGen.NegateInteger(); .)
 453        | Term<out type>
 454      )
 455      { AddOp<out op>                         (. if (op == CodeGen.or)
 456                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 457        Term<out type2>                       (. switch (op) {
 458                                                   case CodeGen.or:
 459                                                     if (!IsBool(type) || !IsBool(type2)) {
 460                                                       SemError("boolean operands needed"); 
 461                                                       progState = 1; }
 462                                                     type = Types.boolType;
 463                                                     break;
 464                                                   default:
 465                                                     if (!IsArith(type) || !IsArith(type2)) {
 466                                                       SemError("arithmetic operands needed");
 467                                                       type = Types.noType;
 468                                                       progState = 1;
 469                                                     }
 470                                                     CodeGen.BinaryOp(op);
 471                                                     break;
 472                                                 } .)
 473      }                                       (. shortcircuit.Here(); .)
 474   .
 475 
 476   Term<out int type>                         (. int type2;
 477                                                 int op;
 478                                                 Label shortcircuit = new Label(!known); .)
 479   =  Factor<out type>
 480      { MulOp<out op>                         (. if (op == CodeGen.and)
 481                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 482        Factor<out type2>                     (. switch (op) {
 483                                                   case CodeGen.and:
 484                                                     if (!IsBool(type) || !IsBool(type2)) {
 485                                                       SemError("boolean operands needed"); progState = 1; }
 486                                                     type = Types.boolType;
 487                                                     break;
 488                                                   default:
 489                                                     if (!IsArith(type) || !IsArith(type2)) {
 490                                                       SemError("arithmetic operands needed");
 491                                                       type = Types.noType;
 492                                                       progState = 1;
 493                                                     }
 494                                                     CodeGen.BinaryOp(op);
 495                                                     break;
 496                                                 } .)
 497      }                                       (. shortcircuit.Here(); .)
 498   .
 499 
 500   Factor<out int type>                       (. type = Types.noType;
 501                                                 int size;
 502                                                 DesType des;
 503                                                 ConstRec con; .)
 504   =    Designator<out des>                   (. type = des.type;
 505                                                 switch (des.entry.kind) {
 506                                                   case Kinds.Var:
 507                                                     CodeGen.Dereference();
 508                                                     break;
 509                                                   case Kinds.Con:
 510                                                     CodeGen.LoadConstant(des.entry.value);
 511                                                     break;
 512                                                   default:
 513                                                     SemError("wrong kind of identifier");
 514                                                     progState = 1;
 515                                                     break;
 516                                                 } .)
 517                                         
 518      | Constant<out con>                     (. type = con.type;
 519                                                 CodeGen.LoadConstant(con.value); .)
 520      | "new" BasicType<out type>             (. type++; .)
 521          "[" Expression<out size>            (. if (!IsArith(size)){
 522                                                   SemError("array size must be integer");
 523                                                   progState = 1; }
 524                                                 CodeGen.Allocate(); .)
 525          "]"
 526      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 527                                                 else CodeGen.NegateBoolean();
 528                                                 type = Types.boolType; .)
 529      | "(" Expression<out type> ")"
 530   .
 531 
 532   AddOp<out int op>                          (. op = CodeGen.nop; .)
 533   =    "+"                                   (. op = CodeGen.add; .)
 534      | "-"                                   (. op = CodeGen.sub; .)
 535      | "||"                                  (. op = CodeGen.or;  .)
 536   .
 537 
 538   MulOp<out int op>                          (. op = CodeGen.nop; .)
 539   =    "*"                                   (. op = CodeGen.mul; .)
 540      | "/"                                   (. op = CodeGen.div; .)
 541      | "%"                                   (. op = CodeGen.rem; .)
 542      | "&&"                                  (. op = CodeGen.and; .)
 543   .
 544 
 545   RelOp<out int op>                          (. op = CodeGen.nop; .)
 546   =    "=="                                  (. op = CodeGen.ceq; .)
 547      | "!="                                  (. op = CodeGen.cne; .)
 548      | "<"                                   (. op = CodeGen.clt; .)
 549      | "<="                                  (. op = CodeGen.cle; .)
 550      | ">"                                   (. op = CodeGen.cgt; .)
 551      | ">="                                  (. op = CodeGen.cge; .)
 552   .
 553 
 554   AssignOp = "=" .
 555 
 556   Ident<out string name>
 557   =  identifier                              (. name = token.val; .)
 558   .
 559 
 560   StringConst<out string str>
 561   =  stringLit                               (. str = token.val; .)
 562      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 563      }
 564                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 565   .
 566 
 567   CharConst<out int value>
 568   =  charLit                                 (. string str = token.val;
 569                                                 str = Unescape(str.Substring(1, str.Length - 2));
 570                                                 value = str[0]; .)
 571   .
 572 
 573   IntConst<out int value>
 574   =  number                                  (. try {
 575                                                   value = Convert.ToInt32(token.val);
 576                                                 } catch (Exception) {
 577                                                   value = 0; SemError("number out of range"); progState = 1;
 578                                                 } .)
 579   .
 580 
 581 END Parva.
 582 

0 errors detected
6 warnings detected

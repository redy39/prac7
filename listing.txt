  Warning: FormalParameters is deletable
  Warning: Arguments is deletable

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019  */
  11 
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16   static int progState = 0;
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool Compatible(int typeOne, int typeTwo) {
  71   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  72     return    typeOne == typeTwo
  73            || IsArith(typeOne) && IsArith(typeTwo)
  74            || typeOne == Types.noType
  75            || typeTwo == Types.noType
  76            || IsArray(typeOne) && typeTwo == Types.nullType
  77            || IsArray(typeTwo) && typeOne == Types.nullType;
  78   } // Compatible
  79 
  80   static bool Assignable(int typeOne, int typeTwo) {
  81   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  82     return    typeOne == typeTwo
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType;
  86   } // Assignable
  87 
  88   static bool IsCall(out DesType des) {
  89   // Used as an LL(1) conflict resolver variable/function name
  90     Entry entry = Table.Find(la.val);
  91     des = new DesType(entry);
  92     return entry.kind == Kinds.Fun;
  93   } // IsCall
  94 
  95 
  96 /* -------------------------------------------------------------------------- */
  97 
  98 CHARACTERS
  99   lf         = CHR(10) .
 100   backslash  = CHR(92) .
 101   control    = CHR(0) .. CHR(31) .
 102   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 103   digit      = "0123456789" .
 104   stringCh   = ANY - '"' - control - backslash .
 105   charCh     = ANY - "'" - control - backslash .
 106   printable  = ANY - control .
 107 
 108 TOKENS
 109   identifier = letter { { "_" } (letter | digit) } .
 110   number     = digit { digit } .
 111   stringLit  = '"' { stringCh | backslash printable } '"' .
 112   charLit    = "'" ( charCh   | backslash printable ) "'" .
 113 
 114 PRAGMAS
 115   DebugOn     = "$D+" .                      (. debug = true; .)
 116   DebugOff    = "$D-" .                      (. debug = false; .)
 117   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 118   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 119   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 120   CodeGenOn   = "$C+" .                      (. CodeGen.Enable(); .)
 121   CodeGenOff  = "$C-" .                      (. CodeGen.Disable(); .)
 122 
 123 COMMENTS FROM "//" TO lf
 124 COMMENTS FROM "/*" TO "*/"
 125 
 126 IGNORE CHR(9) .. CHR(13)
 127 
 128 PRODUCTIONS
 129 
 130   Parva
 131                                              (. CodeGen.FrameHeader();
 132                                                 // no arguments
 133                                                 CodeGen.Call(mainEntryPoint);
 134                                                 // forward, incomplete
 135                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 136   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 137                                                   SemError("missing Main function"); progState = 1; .)
 138   .
 139 
 140   FuncDeclaration      
 141                        (. StackFrame frame = new StackFrame();
 142                           Entry function = new Entry(); .)
 143   =  "void" Ident<out function.name>  
 144                                              (. function.kind = Kinds.Fun;
 145                                                 function.type = Types.voidType;
 146                                                 function.nParams = 0;
 147                                                 function.firstParam = null;
 148                                                 function.entryPoint = new Label(known);
 149                                                 Table.Insert(function);
 150                                                 Table.OpenScope(); .)
 151      "(" FormalParameters<function> ")"
 152                                              (. frame.size = CodeGen.headerSize + 
 153                                                 function.nParams;
 154                                                 if (function.name.ToUpper().Equals("MAIN")
 155                                                 && !mainEntryPoint.IsDefined()
 156                                                 && function.nParams == 0) {
 157                                                   mainEntryPoint.Here(); } .)
 158      Body<frame>                             (. Table.CloseScope(); .)
 159   .
 160 
 161   FormalParameters<Entry func>               (. Entry param; .)
 162   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 163       { WEAK "," OneParam<out param, func> }
 164     ] .
 165 
 166   OneParam<out Entry param, Entry func>
 167                                              (. param = new Entry();
 168                                                 param.kind = Kinds.Var;
 169                                                 param.offset = CodeGen.headerSize + func.nParams;
 170                                                 func.nParams++; .)
 171   =  Type<out param.type>
 172      Ident<out param.name>                   (. Table.Insert(param); .)
 173   .
 174 
 175   Body<StackFrame frame>                     (. Label DSPLabel = new Label(known);
 176                                                 int sizeMark = frame.size;
 177                                                 CodeGen.OpenStackFrame(0); .)
 178   =  "{" { Statement<frame> }
 179      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 180                                                 CodeGen.LeaveVoidFunction(); .)
 181 .
 182 
 183   Statement<StackFrame frame>
 184   =  SYNC (   Block<frame>
 185             | ConstDeclarations
 186             | VarDeclarations<frame>
 187             | AssignmentOrCall
 188             | IfStatement<frame>
 189             | WhileStatement<frame>
 190             | HaltStatement
 191             | ReturnStatement
 192             | ReadStatement
 193             | WriteStatement
 194             | ";"                            (. Warning("possible unintended empty statement"); .)
 195           ) .
 196 
 197   Block<StackFrame frame>
 198   =                                          (. Table.OpenScope();
 199                                                 bool empty = true;  .)
 200      "{" { Statement<frame> }                (. empty = false; .)
 201      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 202                                                 Table.CloseScope(); .)
 203   .
 204 
 205   ConstDeclarations
 206   = "const" OneConst { WEAK "," OneConst }
 207     WEAK ";"
 208   .
 209 
 210   OneConst                                   (. Entry constant = new Entry();
 211                                                 ConstRec con; .)
 212   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 213      AssignOp Constant<out con>              (. constant.value = con.value;
 214                                                 constant.type = con.type;
 215                                                 Table.Insert(constant); .)
 216   .
 217 
 218   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 219   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 220     | CharConst<out con.value>               (. con.type = Types.intType; .)
 221     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 222     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 223     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 224   .
 225 
 226   VarDeclarations<StackFrame frame>          (. int type; .)
 227   =  Type<out type>                          
 228      VarList<frame, type>
 229      WEAK ";"
 230   .
 231 
 232   Type<out int type>                         
 233   =   BasicType<out type>
 234        [ "[]"                                (. type++; .)
 235        ] .
 236 
 237   BasicType<out int type>                    (. type = Types.noType; .)
 238   =   "int"                                  (. type = Types.intType; .)
 239     | "bool"                                 (. type = Types.boolType; .)
 240   .
 241 
 242 
 243   VarList<StackFrame frame, int type>
 244   =  OneVar<frame, type>
 245      { WEAK "," OneVar<frame, type> }
 246   .
 247 
 248   OneVar<StackFrame frame, int type>         (. int expType;
 249                                                 Entry var = new Entry(); .)
 250   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 251                                                 var.type = type;
 252                                                 var.offset = frame.size;
 253                                                 frame.size++; .)
 254      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 255        Expression<out expType>               (. if (!Assignable(var.type, expType))
 256                                                   SemError("incompatible types in assignment");
 257                                                 progState = 1;
 258                                                 CodeGen.Assign(var.type); .)
 259      ]                                       (. Table.Insert(var); .)
 260   .
 261 
 262 
 263   AssignmentOrCall                           (. int expType;
 264                                                 DesType des; .)
 265   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 266          identifier                          (. CodeGen.FrameHeader(); .)
 267          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 268       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 269                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 270                                                 progState = 1; .)
 271          AssignOp
 272          Expression<out expType>             (. if (!Assignable(des.type, expType))
 273                                                   SemError("incompatible types in assignment");
 274                                                 progState = 1;
 275                                                 CodeGen.Assign(des.type); .)
 276      ) WEAK ";"
 277   .
 278 
 279   Arguments<DesType des>                     (. int argCount = 0;
 280                                                 Entry fp = des.entry.firstParam; .)
 281   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 282        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 283        }
 284      ]                                       (. if (argCount != des.entry.nParams)
 285                                                   SemError("wrong number of arguments"); 
 286                                                 progState = 1; .)
 287   .
 288 
 289   OneArg<Entry fp>                           (. int argType; .)
 290   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 291                                                   SemError("argument type mismatch"); 
 292                                                 progState = 1; .)
 293      )
 294   .
 295 
 296   Designator<out DesType des>                (. string name;
 297                                                 int indexType; .)
 298   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 299                                                 if (!entry.declared)
 300                                                   SemError("undeclared identifier");
 301                                                 progState = 1;
 302                                                 des = new DesType(entry);
 303                                                 if (entry.kind == Kinds.Var)
 304                                                   CodeGen.LoadAddress(entry); .)
 305      [     "["                               (. if (IsArray(des.type)) des.type--;
 306                                                 else { SemError("unexpected subscript");
 307                                                   progState = 1; }
 308                                                 if (des.entry.kind != Kinds.Var) {
 309                                                   SemError("unexpected subscript");
 310                                                   progState = 1; }
 311                                                 CodeGen.Dereference(); .)
 312               Expression<out indexType>      (. if (!IsArith(indexType)) {
 313                                                   SemError("invalid subscript type");
 314                                                 progState = 1; }
 315                                                 CodeGen.Index(); .)
 316 
 317            "]"
 318      ]
 319   .
 320 
 321   IfStatement<StackFrame frame>
 322                                              (. Label falseLabel = new Label(!known); .)
 323   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 324         Statement<frame>                     (. falseLabel.Here(); .)
 325   .
 326 
 327 
 328   WhileStatement<StackFrame frame>
 329                                              (. Label loopExit  = new Label(!known);
 330                                                 Label loopStart = new Label(known); .)
 331   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 332      Statement<frame>              	         (. CodeGen.Branch(loopStart);
 333                                                 loopExit.Here(); .)
 334   .
 335 
 336   HaltStatement
 337   =  "halt"
 338      [
 339      "(" 
 340      [ WriteList ]
 341      ")"
 342      ]                                       (. CodeGen.LeaveProgram(); .)
 343      WEAK ";"
 344   .
 345 
 346   ReturnStatement              
 347   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 348     WEAK ";"
 349   .
 350 
 351   ReadStatement
 352   = (   "read"     "("   ReadList   ")"
 353       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 354     )
 355     WEAK ";"
 356   .
 357 
 358   ReadList
 359   = ReadElement { WEAK "," ReadElement }
 360   .
 361 
 362   ReadElement                                (. string str;
 363                                                 DesType des; .)
 364   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 365     { [ StrAddOp ] StringConst<out str>      (. CodeGen.WriteString(str); .)
 366 	}
 367     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 368                                                   SemError("wrong kind of identifier");
 369                                                   progState = 1; }
 370                                                 switch (des.type) {
 371                                                   case Types.intType:
 372                                                   case Types.boolType:
 373                                                     CodeGen.Read(des.type); break;
 374                                                   default:
 375                                                     SemError("cannot read this type"); progState = 1; break;
 376                                                 } .)
 377   .
 378 
 379   WriteStatement
 380   = (   "write"     "("   WriteList   ")"
 381       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 382     )
 383     WEAK ";"
 384   .
 385 
 386   WriteList
 387   = WriteElement { WEAK "," WriteElement }
 388   .
 389 
 390   WriteElement                               (. int expType;
 391                                                 string str; .)
 392   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 393     { [ StrAddOp ] StringConst<out str>      (. CodeGen.WriteString(str); .)
 394 	}
 395     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType)) {
 396                                                   SemError("cannot write this type"); progState = 1; }
 397                                                 switch (expType) {
 398                                                   case Types.intType:
 399                                                   case Types.boolType:
 400                                                     CodeGen.Write(expType); break;
 401                                                   default:
 402                                                     break;
 403                                                 } .)
 404   .
 405 
 406   Condition                                  (. int type; .)
 407   =  Expression<out type>                    (. if (!IsBool(type)) {
 408                                                   SemError("Boolean expression needed"); progState = 1; } .)
 409   .
 410 
 411   Expression<out int type>                   (. int type2;
 412                                                 int op;
 413                                                 bool comparable; .)
 414   =  AddExp<out type>
 415      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 416                                                   case CodeGen.ceq: case CodeGen.cne:
 417                                                     comparable = Compatible(type, type2);
 418                                                     break;
 419                                                   default:
 420                                                     comparable = IsArith(type) && IsArith(type2);
 421                                                     break;
 422                                                 }
 423                                                 if (!comparable) {
 424                                                   SemError("incomparable operands");
 425                                                   progState = 1; }
 426                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 427      ]
 428   .
 429 
 430   AddExp<out int type>                       (. int type2;
 431                                                 int op;
 432                                                 Label shortcircuit = new Label(!known); .)
 433   =                                          (. type = Types.noType; .)
 434      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 435                                                   SemError("arithmetic operand needed"); 
 436                                                   progState = 1; } .)
 437        | "-" Term<out type>                  (. if (!IsArith(type)) {
 438                                                   SemError("arithmetic operand needed");
 439                                                   progState = 1; }
 440                                                 CodeGen.NegateInteger(); .)
 441        | Term<out type>
 442      )
 443      { AddOp<out op>                         (. if (op == CodeGen.or)
 444                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 445        Term<out type2>                       (. switch (op) {
 446                                                   case CodeGen.or:
 447                                                     if (!IsBool(type) || !IsBool(type2)) {
 448                                                       SemError("boolean operands needed"); 
 449                                                       progState = 1; }
 450                                                     type = Types.boolType;
 451                                                     break;
 452                                                   default:
 453                                                     if (!IsArith(type) || !IsArith(type2)) {
 454                                                       SemError("arithmetic operands needed");
 455                                                       type = Types.noType;
 456                                                       progState = 1;
 457                                                     }
 458                                                     CodeGen.BinaryOp(op);
 459                                                     break;
 460                                                 } .)
 461      }                                       (. shortcircuit.Here(); .)
 462   .
 463 
 464   Term<out int type>                         (. int type2;
 465                                                 int op;
 466                                                 Label shortcircuit = new Label(!known); .)
 467   =  Factor<out type>
 468      { MulOp<out op>                         (. if (op == CodeGen.and)
 469                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 470        Factor<out type2>                     (. switch (op) {
 471                                                   case CodeGen.and:
 472                                                     if (!IsBool(type) || !IsBool(type2)) {
 473                                                       SemError("boolean operands needed"); progState = 1; }
 474                                                     type = Types.boolType;
 475                                                     break;
 476                                                   default:
 477                                                     if (!IsArith(type) || !IsArith(type2)) {
 478                                                       SemError("arithmetic operands needed");
 479                                                       type = Types.noType;
 480                                                       progState = 1;
 481                                                     }
 482                                                     CodeGen.BinaryOp(op);
 483                                                     break;
 484                                                 } .)
 485      }                                       (. shortcircuit.Here(); .)
 486   .
 487 
 488   Factor<out int type>                       (. type = Types.noType;
 489                                                 int size;
 490                                                 DesType des;
 491                                                 ConstRec con; .)
 492   =    Designator<out des>                   (. type = des.type;
 493                                                 switch (des.entry.kind) {
 494                                                   case Kinds.Var:
 495                                                     CodeGen.Dereference();
 496                                                     break;
 497                                                   case Kinds.Con:
 498                                                     CodeGen.LoadConstant(des.entry.value);
 499                                                     break;
 500                                                   default:
 501                                                     SemError("wrong kind of identifier");
 502                                                     progState = 1;
 503                                                     break;
 504                                                 } .)
 505                                         
 506      | Constant<out con>                     (. type = con.type;
 507                                                 CodeGen.LoadConstant(con.value); .)
 508      | "new" BasicType<out type>             (. type++; .)
 509          "[" Expression<out size>            (. if (!IsArith(size)){
 510                                                   SemError("array size must be integer");
 511                                                   progState = 1; }
 512                                                 CodeGen.Allocate(); .)
 513          "]"
 514      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 515                                                 else CodeGen.NegateBoolean();
 516                                                 type = Types.boolType; .)
 517      | "(" Expression<out type> ")"
 518   .
 519 
 520   AddOp<out int op>                          (. op = CodeGen.nop; .)
 521   =    "+"                                   (. op = CodeGen.add; .)
 522      | "-"                                   (. op = CodeGen.sub; .)
 523      | "||"                                  (. op = CodeGen.or;  .)
 524   .
 525   
 526   StrAddOp
 527   =   "+"      
 528   .
 529   
 530   MulOp<out int op>                          (. op = CodeGen.nop; .)
 531   =    "*"                                   (. op = CodeGen.mul; .)
 532      | "/"                                   (. op = CodeGen.div; .)
 533      | "%"                                   (. op = CodeGen.rem; .)
 534      | "&&"                                  (. op = CodeGen.and; .)
 535   .
 536 
 537   RelOp<out int op>                          (. op = CodeGen.nop; .)
 538   =    "=="                                  (. op = CodeGen.ceq; .)
 539      | "!="                                  (. op = CodeGen.cne; .)
 540      | "<"                                   (. op = CodeGen.clt; .)
 541      | "<="                                  (. op = CodeGen.cle; .)
 542      | ">"                                   (. op = CodeGen.cgt; .)
 543      | ">="                                  (. op = CodeGen.cge; .)
 544   .
 545 
 546   AssignOp = "=" .
 547 
 548   Ident<out string name>
 549   =  identifier                              (. name = token.val; .)
 550   .
 551 
 552   StringConst<out string str>
 553   =  stringLit                               (. str = token.val;
 554                                                 str = Unescape(str.Substring(1, str.Length - 2)); .)
 555   .
 556 
 557   CharConst<out int value>
 558   =  charLit                                 (. string str = token.val;
 559                                                 str = Unescape(str.Substring(1, str.Length - 2));
 560                                                 value = str[0]; .)
 561   .
 562 
 563   IntConst<out int value>
 564   =  number                                  (. try {
 565                                                   value = Convert.ToInt32(token.val);
 566                                                 } catch (Exception) {
 567                                                   value = 0; SemError("number out of range"); progState = 1;
 568                                                 } .)
 569   .
 570 
 571 END Parva.
 572 

0 errors detected
2 warnings detected

  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in NormalFor: identifier is the start of several alternatives

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12 
  13   public static bool // tied to pragmas/directives
  14     debug    = false,
  15     listCode = false,
  16     warnings = true;
  17   static int progState = 0;
  18   const bool
  19     known = true;
  20 
  21   // This next method might better be located in the code generator.  Traditionally
  22   // it has been left in the ATG file, but that might change in future years
  23   //
  24   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  25   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  26   // to know this!
  27 
  28   static string Unescape(string s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.Length) {
  33       if (s[i] == '\\') {
  34         switch (s[i+1]) {
  35           case '\\': buf.Append('\\'); break;
  36           case '\'': buf.Append('\''); break;
  37           case '\"': buf.Append('\"'); break;
  38           case  'r': buf.Append('\r'); break;
  39           case  'n': buf.Append('\n'); break;
  40           case  't': buf.Append('\t'); break;
  41           case  'b': buf.Append('\b'); break;
  42           case  'f': buf.Append('\f'); break;
  43           default:   buf.Append(s[i+1]); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.Append(s[i]);
  49         i++;
  50       }
  51     }
  52     return buf.ToString();
  53   } // Unescape
  54 
  55   // the following is global for expediency (fewer parameters needed)
  56 
  57   static Label mainEntryPoint = new Label(!known);
  58 
  59   static bool IsArith(int type) {
  60     return type == Types.intType || type == Types.noType;
  61   } // IsArith
  62 
  63   static bool IsBool(int type) {
  64     return type == Types.boolType || type == Types.noType;
  65   } // IsBool
  66 
  67   static bool IsArray(int type) {
  68     return (type % 2) == 1;
  69   } // IsArray
  70 
  71   static bool IsChar(int type) {
  72     return (type == Types.charType);
  73   }
  74   
  75   static bool IsWritable(int type) {
  76     return (type == Types.intType || type == Types.charType);
  77   }
  78 
  79   static bool Compatible(int typeOne, int typeTwo) {
  80   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  81     return    typeOne == typeTwo
  82            || IsArith(typeOne) && IsArith(typeTwo)
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType
  86            || IsArray(typeTwo) && typeOne == Types.nullType;
  87   } // Compatible
  88 
  89   static bool Assignable(int typeOne, int typeTwo) {
  90   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  91     return    typeOne == typeTwo
  92            || typeOne == Types.noType
  93            || typeTwo == Types.noType
  94            || IsArray(typeOne) && typeTwo == Types.nullType;
  95   } // Assignable
  96 
  97   static bool IsCall(out DesType des) {
  98   // Used as an LL(1) conflict resolver variable/function name
  99     Entry entry = Table.Find(la.val);
 100     des = new DesType(entry);
 101     return entry.kind == Kinds.Fun;
 102   } // IsCall
 103 
 104 
 105 /* -------------------------------------------------------------------------- */
 106 
 107 CHARACTERS
 108   lf         = CHR(10) .
 109   backslash  = CHR(92) .
 110   control    = CHR(0) .. CHR(31) .
 111   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 112   digit      = "0123456789" .
 113   stringCh   = ANY - '"' - control - backslash .
 114   charCh     = ANY - "'" - control - backslash .
 115   printable  = ANY - control .
 116 
 117 TOKENS
 118   identifier = letter { { "_" } (letter | digit) } .
 119   number     = digit { digit } .
 120   stringLit  = '"' { stringCh | backslash printable } '"' .
 121   charLit    = "'" ( charCh   | backslash printable ) "'" .
 122 
 123 PRAGMAS
 124   DebugOn     = "$D+" .                      (. debug = true; .)
 125   DebugOff    = "$D-" .                      (. debug = false; .)
 126   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 127   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 128   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 129   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 130   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 131   WarningsOn  = "$W+" .                      (. warnings = true; .)
 132   WarningsOff = "$W-" .                      (. warnings = false; .)
 133 
 134 COMMENTS FROM "//" TO lf
 135 COMMENTS FROM "/*" TO "*/"
 136 
 137 IGNORE CHR(9) .. CHR(13)
 138 
 139 PRODUCTIONS
 140 
 141   Parva
 142                                              (. CodeGen.FrameHeader();
 143                                                 // no arguments
 144                                                 CodeGen.Call(mainEntryPoint);
 145                                                 // forward, incomplete
 146                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 147   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 148                                                   SemError("missing Main function"); progState = 1; .)
 149   .
 150 
 151   FuncDeclaration      
 152                                              (. StackFrame frame = new StackFrame();
 153                                                 Entry function = new Entry(); .)
 154   =  "void" Ident<out function.name>  
 155                                              (. function.kind = Kinds.Fun;
 156                                                 function.type = Types.voidType;
 157                                                 function.nParams = 0;
 158                                                 function.firstParam = null;
 159                                                 function.entryPoint = new Label(known);
 160                                                 Table.Insert(function);
 161                                                 Table.OpenScope(); .)
 162      "(" FormalParameters<function> ")"
 163                                              (. frame.size = CodeGen.headerSize + 
 164                                                 function.nParams;
 165                                                 if (function.name.ToUpper().Equals("MAIN")
 166                                                 && !mainEntryPoint.IsDefined()
 167                                                 && function.nParams == 0) {
 168                                                   mainEntryPoint.Here(); } .)
 169      Body<frame>                             (. Table.CloseScope(); .)
 170   .
 171 
 172   FormalParameters<Entry func>               (. Entry param; .)
 173   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 174       { WEAK "," OneParam<out param, func> }
 175     ] .
 176 
 177   OneParam<out Entry param, Entry func>
 178                                              (. param = new Entry();
 179                                                 param.kind = Kinds.Var;
 180                                                 param.offset = CodeGen.headerSize + func.nParams;
 181                                                 func.nParams++; .)
 182   =  Type<out param.type>
 183      Ident<out param.name>                   (. Table.Insert(param); .)
 184   .
 185 
 186   Body<StackFrame frame>                     (. Label Lbend = new Label(!known); 
 187                                                 Label DSPLabel = new Label(known);
 188                                                 int sizeMark = frame.size;
 189                                                 CodeGen.OpenStackFrame(0); .)
 190   =  "{" { Statement<frame, Lbend> }
 191      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 192                                                 Lbend.Here();
 193                                                 CodeGen.LeaveVoidFunction(); .)
 194 .                                        
 195 
 196   Statement<StackFrame frame, Label label>
 197   =  SYNC (   Block<frame, label>
 198             | ConstDeclarations
 199             | VarDeclarations<frame>
 200             | AssignmentOrCall
 201             | IfStatement<frame, label>
 202             | WhileStatement<frame>
 203             | DoWhileStatment<frame>
 204             | ForStatement<frame>
 205             | HaltStatement
 206             | ReturnStatement
 207             | BreakStatement<label>
 208             | ReadStatement
 209             | WriteStatement
 210             | ";"                            (. Warning("possible unintended empty statement"); .)
 211           ) .
 212 
 213   Block<StackFrame frame, Label Lbend>
 214   =                                          (. Table.OpenScope();
 215                                                 bool empty = true;  .)
 216      "{" { Statement<frame, Lbend> }                (. empty = false; .)
 217      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 218                                                 Table.CloseScope(); .)
 219   .
 220 
 221   ConstDeclarations
 222   = "const" OneConst { WEAK "," OneConst }
 223     WEAK ";"
 224   .
 225 
 226   OneConst                                   (. Entry constant = new Entry();
 227                                                 ConstRec con; .)
 228   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 229      AssignOp Constant<out con>              (. constant.value = con.value;
 230                                                 constant.type = con.type;
 231                                                 Table.Insert(constant); .)
 232   .
 233 
 234   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 235   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 236     | CharConst<out con.value>               (. con.type = Types.charType; .)
 237     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 238     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 239     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 240   .
 241 
 242   VarDeclarations<StackFrame frame>          (. int type; .)
 243   =  Type<out type>                          
 244      VarList<frame, type>
 245      WEAK ";"
 246   .
 247 
 248   Type<out int type>                         
 249   =   BasicType<out type>
 250        [ "[]"                                (. type++; .)
 251        ] .
 252 
 253   BasicType<out int type>                    (. type = Types.noType; .)
 254   =   "int"                                  (. type = Types.intType; .)
 255     | "bool"                                 (. type = Types.boolType; .)
 256     | "char"                                 (. type = Types.charType; .)
 257   .
 258 
 259   VarList<StackFrame frame, int type>
 260   =  OneVar<frame, type>
 261      { WEAK "," OneVar<frame, type> }
 262   .
 263 
 264   OneVar<StackFrame frame, int type>         (. int expType;
 265                                                 Entry var = new Entry(); .)
 266   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 267                                                 var.type = type;
 268                                                 var.offset = frame.size;
 269                                                 frame.size++; .)
 270      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 271        Expression<out expType>               (. if (!Assignable(var.type, expType))
 272                                                   SemError("incompatible types in assignment");
 273                                                 progState = 1;
 274                                                 CodeGen.Assign(var.type); .)
 275      ]                                       (. Table.Insert(var); .)
 276   .
 277 
 278 
 279   AssignmentOrCall                           (. int expType, op;
 280                                                 DesType des; .)
 281   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 282          identifier                          (. CodeGen.FrameHeader(); .)
 283          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 284      |  ( Designator<out des>                (. if (des.entry.kind != Kinds.Var)
 285                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 286                                                 progState = 1; .)
 287           ( AssignOp
 288             Expression<out expType>          (. if (!Assignable(des.type, expType))
 289                                                   SemError("incompatible types in assignment");
 290                                                 progState = 1;
 291                                                 CodeGen.Assign(des.type); .)
 292             | IncOp<out op>                  (. if (!IsArith(des.type) && !IsChar(des.type))
 293                                                   SemError("cannot incriment / decrement this type");
 294                                                 progState = 1;
 295                                                 CodeGen.Dupicate();
 296                                                 CodeGen.Dereference();
 297                                                 CodeGen.LoadConstant(1); 
 298                                                 CodeGen.BinaryOp(op);
 299                                                 CodeGen.Assign(des.type); .)
 300           )
 301         | IncOp<out op>
 302           Designator<out des>                (. if (!IsArith(des.type) && !IsChar(des.type))
 303                                                   SemError("cannot incriment / decrement this type");
 304                                                 progState = 1;
 305                                                 CodeGen.Dupicate();
 306                                                 CodeGen.Dereference();
 307                                                 CodeGen.LoadConstant(1); 
 308                                                 CodeGen.BinaryOp(op);
 309                                                 CodeGen.Assign(des.type); .)
 310         )
 311      ) WEAK ";"
 312   .
 313 
 314   Arguments<DesType des>                     (. int argCount = 0;
 315                                                 Entry fp = des.entry.firstParam; .)
 316   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 317        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 318        }
 319      ]                                       (. if (argCount != des.entry.nParams)
 320                                                   SemError("wrong number of arguments"); 
 321                                                 progState = 1; .)
 322   .
 323 
 324   OneArg<Entry fp>                           (. int argType; .)
 325   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 326                                                   SemError("argument type mismatch"); 
 327                                                 progState = 1; .)
 328      )
 329   .
 330 
 331   Designator<out DesType des>                (. string name;
 332                                                 int indexType; .)
 333   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 334                                                 if (!entry.declared)
 335                                                   SemError("undeclared identifier");
 336                                                 progState = 1;
 337                                                 des = new DesType(entry);
 338                                                 if (entry.kind == Kinds.Var)
 339                                                   CodeGen.LoadAddress(entry); .)
 340      [     "["                               (. if (IsArray(des.type)) des.type--;
 341                                                 else { SemError("unexpected subscript");
 342                                                   progState = 1; }
 343                                                 if (des.entry.kind != Kinds.Var) {
 344                                                   SemError("unexpected subscript");
 345                                                   progState = 1; }
 346                                                 CodeGen.Dereference(); .)
 347               Expression<out indexType>      (. if (!IsArith(indexType)) {
 348                                                   SemError("invalid subscript type");
 349                                                 progState = 1; }
 350                                                 CodeGen.Index(); .)
 351            "]"
 352      ]
 353   .
 354 
 355   IfStatement<StackFrame frame, Label endBlock>
 356                                              (. Label falseLabel = new Label(!known),
 357                                                         endElse = new Label(!known); .)
 358   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 359         ["then"] Statement<frame, endBlock>  (.   CodeGen.Branch(endElse);
 360                                                 falseLabel.Here(); .)
 361      [ "else" Statement<frame, endBlock>
 362      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 363   .
 364 
 365   ElseIfStatement<StackFrame frame, Label endBlock>
 366                                              (. Label falseLabel = new Label(!known),
 367                                                         endElse = new Label(!known); .)
 368   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 369         ["then"] Statement<frame, endBlock>  (. CodeGen.Branch(endElse);
 370                                                 falseLabel.Here(); .)
 371      [ "else" Statement<frame, endBlock>
 372      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 373   .
 374 
 375   WhileStatement<StackFrame frame>
 376                                              (. Label loopExit  = new Label(!known);
 377                                                 Label loopStart = new Label(known); .)
 378   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 379      Statement<frame, loopExit>              (. CodeGen.Branch(loopStart);
 380                                                 loopExit.Here(); .)
 381   .
 382   
 383   DoWhileStatment<StackFrame frame>
 384                                              (. Label loopExit  = new Label(!known); 
 385                                                 Label loopStart = new Label(known); .)
 386   = "do" Statement<frame, loopExit>
 387     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 388                                              (. CodeGen.Branch(loopStart); .)
 389                                              (. loopExit.Here(); .)
 390  .
 391  
 392   ForStatement<StackFrame frame>
 393                                              
 394   = "for" ( NormalFor<frame> | FancyFor<frame> ) .
 395     
 396   NormalFor<StackFrame frame>                (. Label loopExit  = new Label(!known); 
 397                                                 Label loopStart = new Label(!known); .)
 398     
 399   =  
 400     "("                                      (. string name = ""; .)
 401     ( AssignmentOrCall    
 402     | Ident<out name> WEAK ";"               (. if(Table.Find(name) == null)
 403                                                   SemError("Undeclared Identifier: " + name); .)
 404     | VarDeclarations<frame> )
 405                                              (. loopStart.Here(); .)
 406     Condition                                (. CodeGen.BranchFalse(loopExit); .)
 407     WEAK ";"
 408     AssignmentOrCall
 409     ")"
 410     Statement<frame, loopExit>               (. CodeGen.Branch(loopStart); .)
 411                                              (. loopExit.Here(); .)
 412     .
 413 
 414     FancyFor<StackFrame frame>               (. Label loopExit  = new Label(!known);
 415                                                 Label stmStart  = new Label(!known); .)
 416     =                                        (. string name = ""; Entry e; .)
 417     Ident<out name>                          (. e = Table.Find(name); .)
 418                                              (. if(e == null) .)
 419                                              (.   SemError("Undeclared Identifier: " + name); .)
 420     "in"                                     (. int exprType = Types.noType; .)
 421     "("
 422                                              (. CodeGen.LoadAddress(e); .)
 423     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 424                                              (. CodeGen.Assign(exprType); .)
 425                                              (. CodeGen.JumpAndLink(stmStart); .)
 426     { ","
 427                                              (. CodeGen.LoadAddress(e); .)
 428     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 429                                              (. CodeGen.Assign(exprType); .)
 430                                              (. CodeGen.writeWord(PVM.jal); .)
 431                                              (. CodeGen.writeWord(stmStart.Address()); .)
 432     }                                        (. CodeGen.Branch(loopExit); .)
 433     ")"                                      (. stmStart.Here(); .)
 434     Statement<frame, loopExit>               (. CodeGen.JumpReturnAddress(); .)
 435                                              (. loopExit.Here(); .)
 436   .
 437 
 438   HaltStatement
 439   =  "halt"
 440      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 441      WEAK ";"
 442   .
 443 
 444   ReturnStatement
 445   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 446     WEAK ";"
 447   .
 448 
 449   BreakStatement<Label Lb>
 450   = "break"
 451     WEAK ";"                                 (. CodeGen.Branch(Lb); .)
 452   .
 453 
 454   ReadStatement
 455   = (   "read"     "("   ReadList   ")"
 456       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 457     )
 458     WEAK ";"
 459   .
 460 
 461   ReadList
 462   = ReadElement { WEAK "," ReadElement }
 463   .
 464 
 465   ReadElement                                (. string str;
 466                                                 DesType des; .)
 467   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 468     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 469                                                   SemError("wrong kind of identifier");
 470                                                   progState = 1; }
 471                                                 switch (des.type) {
 472                                                   case Types.intType:
 473                                                   case Types.charType:
 474                                                   case Types.boolType:
 475                                                     CodeGen.Read(des.type); break;
 476                                                   default:
 477                                                     SemError("cannot read this type"); progState = 1; break;
 478                                                 } .)
 479   .
 480 
 481   WriteStatement
 482   = (   "write"     "("   WriteList   ")"
 483       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 484     )
 485     WEAK ";"
 486   .
 487 
 488   WriteList
 489   = WriteElement { WEAK "," WriteElement }
 490   .
 491 
 492   WriteElement                               (. int expType;
 493                                                 string str; .)
 494   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 495     | Expression<out expType>                (. if (!IsWritable(expType)) {
 496                                                   SemError("cannot write this type"); progState = 1; }
 497                                                 switch (expType) {
 498                                                   case Types.intType:
 499                                                   case Types.boolType:
 500                                                   case Types.charType:
 501                                                     CodeGen.Write(expType); break;
 502                                                   default:
 503                                                     break;
 504                                                 } .)
 505   .
 506 
 507   Condition                                  (. int type; .)
 508   =  Expression<out type>                    (. if (!IsBool(type)) {
 509                                                   SemError("Boolean expression needed"); progState = 1; } .)
 510   .
 511 
 512   Expression<out int type>                   (. int type2;
 513                                                 int op;
 514                                                 bool comparable; .)
 515   =  AddExp<out type>
 516      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 517                                                   case CodeGen.ceq: case CodeGen.cne:
 518                                                     comparable = Compatible(type, type2);
 519                                                     break;
 520                                                   default:
 521                                                     comparable = (IsArith(type) || IsChar(type)) 
 522                                                               && (IsArith(type2) || IsChar(type2));
 523                                                     break;
 524                                                 }
 525                                                 if (!comparable) {
 526                                                   SemError("incomparable operands");
 527                                                   progState = 1; }
 528                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 529      ]
 530   .
 531 
 532   AddExp<out int type>                       (. int type2;
 533                                                 int op;
 534                                                 Label shortcircuit = new Label(!known); .)
 535   =                                          (. type = Types.noType; .)
 536      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 537                                                   SemError("arithmetic operand needed"); 
 538                                                   progState = 1; } .)
 539        | "-" Term<out type>                  (. if (!IsArith(type)) {
 540                                                   SemError("arithmetic operand needed");
 541                                                   progState = 1; }
 542                                                 CodeGen.NegateInteger(); .)
 543        | Term<out type>
 544      )
 545      { AddOp<out op>                         (. if (op == CodeGen.or)
 546                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 547        Term<out type2>                       (. switch (op) {
 548                                                   case CodeGen.or:
 549                                                     if (!IsBool(type) || !IsBool(type2)) {
 550                                                       SemError("boolean operands needed"); 
 551                                                       progState = 1; }
 552                                                     type = Types.boolType;
 553                                                     break;
 554                                                   case CodeGen.add:
 555                                                     if((!IsArith(type) && !IsChar(type))
 556                                                     || (!IsArith(type2) && !IsChar(type2))) {
 557                                                       SemError("operand must be of type int or type char");
 558                                                       progState = 1;
 559                                                     }
 560                                                     type = IsChar(type) && IsChar(type2) ? Types.charType : Types.intType; 
 561                                                     CodeGen.BinaryOp(op);
 562                                                     break;
 563                                                   default:
 564                                                     if((!IsArith(type) && !IsChar(type))
 565                                                     || (!IsArith(type2) && !IsChar(type2))) {
 566                                                       SemError("arithmetic operands needed");
 567                                                       type = Types.noType;
 568                                                       progState = 1;
 569                                                     }
 570                                                     type = Types.intType;
 571                                                     CodeGen.BinaryOp(op);
 572                                                     break;
 573                                                 } .)
 574      }                                       (. shortcircuit.Here(); .)
 575   .
 576 
 577   Term<out int type>                         (. int type2;
 578                                                 int op;
 579                                                 Label shortcircuit = new Label(!known); .)
 580   =  Factor<out type>
 581      { MulOp<out op>                         (. if (op == CodeGen.and)
 582                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 583        Factor<out type2>                     (. switch (op) {
 584                                                   case CodeGen.and:
 585                                                     if (!IsBool(type) || !IsBool(type2)) {
 586                                                       SemError("boolean operands needed"); progState = 1; }
 587                                                     type = Types.boolType;
 588                                                     break;
 589                                                   default:
 590                                                     if (!IsArith(type) || !IsArith(type2)) {
 591                                                       SemError("arithmetic operands needed");
 592                                                       type = Types.noType;
 593                                                       progState = 1;
 594                                                     }
 595                                                     CodeGen.BinaryOp(op);
 596                                                     break;
 597                                                 } .)
 598      }                                       (. shortcircuit.Here(); .)
 599   .
 600 
 601   Factor<out int type>                       (. type = Types.noType;
 602                                                 int size;
 603                                                 DesType des;
 604                                                 ConstRec con; .)
 605   =    Designator<out des>                   (. type = des.type;
 606                                                 switch (des.entry.kind) {
 607                                                   case Kinds.Var:
 608                                                     CodeGen.Dereference();
 609                                                     break;
 610                                                   case Kinds.Con:
 611                                                     CodeGen.LoadConstant(des.entry.value);
 612                                                     break;
 613                                                   default:
 614                                                     SemError("wrong kind of identifier");
 615                                                     progState = 1;
 616                                                     break;
 617                                                 } .)
 618                                         
 619      | Constant<out con>                     (. type = con.type;
 620                                                 CodeGen.LoadConstant(con.value); .)
 621      | "new" BasicType<out type>             (. type++; .)
 622          "[" Expression<out size>            (. if (!IsArith(size)){
 623                                                   SemError("array size must be integer");
 624                                                   progState = 1; }
 625                                                 CodeGen.Allocate(); .)
 626          "]"
 627      | "length"
 628          "(" Designator<out des> ")"         (. if (!IsArray(des.type))
 629                                                   SemError("operand must be array type"); 
 630                                                 type = Types.intType; 
 631                                                 CodeGen.Dereference();
 632                                                 CodeGen.Dereference(); .)
 633      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 634                                                 else CodeGen.NegateBoolean();
 635                                                 type = Types.boolType; .)
 636      | "(" Expression<out type> ")"
 637   .
 638 
 639   AddOp<out int op>                          (. op = CodeGen.nop; .)
 640   =    "+"                                   (. op = CodeGen.add; .)
 641      | "-"                                   (. op = CodeGen.sub; .)
 642      | "||"                                  (. op = CodeGen.or;  .)
 643   .
 644 
 645   MulOp<out int op>                          (. op = CodeGen.nop; .)
 646   =    "*"                                   (. op = CodeGen.mul; .)
 647      | "/"                                   (. op = CodeGen.div; .)
 648      | "%"                                   (. op = CodeGen.rem; .)
 649      | "&&"                                  (. op = CodeGen.and; .)
 650   .
 651 
 652   RelOp<out int op>                          (. op = CodeGen.nop; .)
 653   =    "=="                                  (. op = CodeGen.ceq; .)
 654      | "!="                                  (. op = CodeGen.cne; .)
 655      | "<"                                   (. op = CodeGen.clt; .)
 656      | "<="                                  (. op = CodeGen.cle; .)
 657      | ">"                                   (. op = CodeGen.cgt; .)
 658      | ">="                                  (. op = CodeGen.cge; .)
 659   .
 660 
 661   IncOp<out int op>                          (. op = CodeGen.nop; .)
 662   =    "++"                                  (. op = CodeGen.add; .)
 663      | "--"                                  (. op = CodeGen.sub; .)
 664   .
 665 
 666   AssignOp = "=" .
 667 
 668   Ident<out string name>
 669   =  identifier                              (. name = token.val; .)
 670   .
 671 
 672   StringConst<out string str>
 673   =  stringLit                               (. str = token.val; .)
 674      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 675      }
 676                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 677   .
 678 
 679   CharConst<out int value>
 680   =  charLit                                 (. string str = token.val;
 681                                                 str = Unescape(str.Substring(1, str.Length - 2));
 682                                                 value = (int) str[0]; .)
 683   .
 684 
 685   IntConst<out int value>
 686   =  number                                  (. try {
 687                                                   value = Convert.ToInt32(token.val);
 688                                                 } catch (Exception) {
 689                                                   value = 0; SemError("number out of range"); progState = 1;
 690                                                 } .)
 691   .
 692 
 693 END Parva.
 694 

0 errors detected
7 warnings detected

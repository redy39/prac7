  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in NormalFor: identifier is the start of several alternatives

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12 
  13   public static bool // tied to pragmas/directives
  14     debug    = false,
  15     listCode = false,
  16     warnings = true;
  17   static int progState = 0;
  18   const bool
  19     known = true;
  20 
  21   // This next method might better be located in the code generator.  Traditionally
  22   // it has been left in the ATG file, but that might change in future years
  23   //
  24   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  25   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  26   // to know this!
  27 
  28   static string Unescape(string s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.Length) {
  33       if (s[i] == '\\') {
  34         switch (s[i+1]) {
  35           case '\\': buf.Append('\\'); break;
  36           case '\'': buf.Append('\''); break;
  37           case '\"': buf.Append('\"'); break;
  38           case  'r': buf.Append('\r'); break;
  39           case  'n': buf.Append('\n'); break;
  40           case  't': buf.Append('\t'); break;
  41           case  'b': buf.Append('\b'); break;
  42           case  'f': buf.Append('\f'); break;
  43           default:   buf.Append(s[i+1]); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.Append(s[i]);
  49         i++;
  50       }
  51     }
  52     return buf.ToString();
  53   } // Unescape
  54 
  55   // the following is global for expediency (fewer parameters needed)
  56 
  57   static Label mainEntryPoint = new Label(!known);
  58 
  59   static bool IsArith(int type) {
  60     return type == Types.intType || type == Types.noType;
  61   } // IsArith
  62 
  63   static bool IsBool(int type) {
  64     return type == Types.boolType || type == Types.noType;
  65   } // IsBool
  66 
  67   static bool IsArray(int type) {
  68     return (type % 2) == 1;
  69   } // IsArray
  70 
  71   static bool IsChar(int type) {
  72     return (type == Types.charType);
  73   }
  74   
  75   static bool IsWritable(int type) {
  76     return (type == Types.intType 
  77         || type == Types.charType
  78         || type == Types.boolType);
  79   }
  80 
  81   static bool Compatible(int typeOne, int typeTwo) {
  82   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  83     return    typeOne == typeTwo
  84            || IsArith(typeOne) && IsArith(typeTwo)
  85            || typeOne == Types.noType
  86            || typeTwo == Types.noType
  87            || IsArray(typeOne) && typeTwo == Types.nullType
  88            || IsArray(typeTwo) && typeOne == Types.nullType;
  89   } // Compatible
  90 
  91   static bool Assignable(int typeOne, int typeTwo) {
  92   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  93     return    typeOne == typeTwo
  94            || typeOne == Types.noType
  95            || typeTwo == Types.noType
  96            || IsArray(typeOne) && typeTwo == Types.nullType;
  97   } // Assignable
  98 
  99   static bool IsCall(out DesType des) {
 100   // Used as an LL(1) conflict resolver variable/function name
 101     Entry entry = Table.Find(la.val);
 102     des = new DesType(entry);
 103     return entry.kind == Kinds.Fun;
 104   } // IsCall
 105 
 106 
 107 /* -------------------------------------------------------------------------- */
 108 
 109 CHARACTERS
 110   lf         = CHR(10) .
 111   backslash  = CHR(92) .
 112   control    = CHR(0) .. CHR(31) .
 113   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 114   digit      = "0123456789" .
 115   stringCh   = ANY - '"' - control - backslash .
 116   charCh     = ANY - "'" - control - backslash .
 117   printable  = ANY - control .
 118 
 119 TOKENS
 120   identifier = letter { { "_" } (letter | digit) } .
 121   number     = digit { digit } .
 122   stringLit  = '"' { stringCh | backslash printable } '"' .
 123   charLit    = "'" ( charCh   | backslash printable ) "'" .
 124 
 125 PRAGMAS
 126   DebugOn     = "$D+" .                      (. debug = true; .)
 127   DebugOff    = "$D-" .                      (. debug = false; .)
 128   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 129   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 130   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 131   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 132   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 133   WarningsOn  = "$W+" .                      (. warnings = true; .)
 134   WarningsOff = "$W-" .                      (. warnings = false; .)
 135 
 136 COMMENTS FROM "//" TO lf
 137 COMMENTS FROM "/*" TO "*/"
 138 
 139 IGNORE CHR(9) .. CHR(13)
 140 
 141 PRODUCTIONS
 142 
 143   Parva
 144                                              (. CodeGen.FrameHeader();
 145                                                 // no arguments
 146                                                 CodeGen.Call(mainEntryPoint);
 147                                                 // forward, incomplete
 148                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 149   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 150                                                   SemError("missing Main function"); progState = 1; .)
 151   .
 152 
 153   FuncDeclaration      
 154                                              (. StackFrame frame = new StackFrame();
 155                                                 Entry function = new Entry(); .)
 156   =  "void" Ident<out function.name>  
 157                                              (. function.kind = Kinds.Fun;
 158                                                 function.type = Types.voidType;
 159                                                 function.nParams = 0;
 160                                                 function.firstParam = null;
 161                                                 function.entryPoint = new Label(known);
 162                                                 Table.Insert(function);
 163                                                 Table.OpenScope(); .)
 164      "(" FormalParameters<function> ")"
 165                                              (. frame.size = CodeGen.headerSize + 
 166                                                 function.nParams;
 167                                                 if (function.name.ToUpper().Equals("MAIN")
 168                                                 && !mainEntryPoint.IsDefined()
 169                                                 && function.nParams == 0) {
 170                                                   mainEntryPoint.Here(); } .)
 171      Body<frame>                             (. Table.CloseScope(); .)
 172   .
 173 
 174   FormalParameters<Entry func>               (. Entry param; .)
 175   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 176       { WEAK "," OneParam<out param, func> }
 177     ] .
 178 
 179   OneParam<out Entry param, Entry func>
 180                                              (. param = new Entry();
 181                                                 param.kind = Kinds.Var;
 182                                                 param.offset = CodeGen.headerSize + func.nParams;
 183                                                 func.nParams++; .)
 184   =  Type<out param.type>
 185      Ident<out param.name>                   (. Table.Insert(param); .)
 186   .
 187 
 188   Body<StackFrame frame>                     (. Label Lbend = new Label(!known); 
 189                                                 Label DSPLabel = new Label(known);
 190                                                 int sizeMark = frame.size;
 191                                                 CodeGen.OpenStackFrame(0); .)
 192   =  "{" { Statement<frame, Lbend> }
 193      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 194                                                 Lbend.Here();
 195                                                 CodeGen.LeaveVoidFunction(); .)
 196 .                                        
 197 
 198   Statement<StackFrame frame, Label label>
 199   =  SYNC (   Block<frame, label>
 200             | ConstDeclarations
 201             | VarDeclarations<frame>
 202             | AssignmentOrCall
 203             | IfStatement<frame, label>
 204             | WhileStatement<frame>
 205             | DoWhileStatment<frame>
 206             | ForStatement<frame>
 207             | HaltStatement
 208             | ReturnStatement
 209             | BreakStatement<label>
 210             | ReadStatement
 211             | WriteStatement
 212             | ";"                            (. Warning("possible unintended empty statement"); .)
 213           ) .
 214 
 215   Block<StackFrame frame, Label Lbend>
 216   =                                          (. Table.OpenScope();
 217                                                 bool empty = true;  .)
 218      "{" { Statement<frame, Lbend> }                (. empty = false; .)
 219      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 220                                                 Table.CloseScope(); .)
 221   .
 222 
 223   ConstDeclarations
 224   = "const" OneConst { WEAK "," OneConst }
 225     WEAK ";"
 226   .
 227 
 228   OneConst                                   (. Entry constant = new Entry();
 229                                                 ConstRec con; .)
 230   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 231      AssignOp Constant<out con>              (. constant.value = con.value;
 232                                                 constant.type = con.type;
 233                                                 Table.Insert(constant); .)
 234   .
 235 
 236   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 237   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 238     | CharConst<out con.value>               (. con.type = Types.charType; .)
 239     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 240     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 241     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 242   .
 243 
 244   VarDeclarations<StackFrame frame>          (. int type; .)
 245   =  Type<out type>                          
 246      VarList<frame, type>
 247      WEAK ";"
 248   .
 249 
 250   Type<out int type>                         
 251   =   BasicType<out type>
 252        [ "[]"                                (. type++; .)
 253        ] .
 254 
 255   BasicType<out int type>                    (. type = Types.noType; .)
 256   =   "int"                                  (. type = Types.intType; .)
 257     | "bool"                                 (. type = Types.boolType; .)
 258     | "char"                                 (. type = Types.charType; .)
 259   .
 260 
 261   VarList<StackFrame frame, int type>
 262   =  OneVar<frame, type>
 263      { WEAK "," OneVar<frame, type> }
 264   .
 265 
 266   OneVar<StackFrame frame, int type>         (. int expType;
 267                                                 Entry var = new Entry(); .)
 268   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 269                                                 var.type = type;
 270                                                 var.offset = frame.size;
 271                                                 frame.size++; .)
 272      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 273        Expression<out expType>               (. if (!Assignable(var.type, expType))
 274                                                   SemError("incompatible types in assignment");
 275                                                 progState = 1;
 276                                                 CodeGen.Assign(var.type); .)
 277      ]                                       (. Table.Insert(var); .)
 278   .
 279 
 280 
 281   AssignmentOrCall                           (. int expType, op;
 282                                                 DesType des; .)
 283   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 284          identifier                          (. CodeGen.FrameHeader(); .)
 285          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 286      |  ( Designator<out des>                (. if (des.entry.kind != Kinds.Var)
 287                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 288                                                 progState = 1; .)
 289           ( AssignOp
 290             Expression<out expType>          (. if (!Assignable(des.type, expType))
 291                                                   SemError("incompatible types in assignment");
 292                                                 progState = 1;
 293                                                 CodeGen.Assign(des.type); .)
 294             | IncOp<out op>                  (. if (!IsArith(des.type) && !IsChar(des.type))
 295                                                   SemError("cannot incriment / decrement this type");
 296                                                 progState = 1;
 297                                                 CodeGen.Dupicate();
 298                                                 CodeGen.Dereference();
 299                                                 CodeGen.LoadConstant(1); 
 300                                                 CodeGen.BinaryOp(op);
 301                                                 CodeGen.Assign(des.type); .)
 302           )
 303         | IncOp<out op>
 304           Designator<out des>                (. if (!IsArith(des.type) && !IsChar(des.type))
 305                                                   SemError("cannot incriment / decrement this type");
 306                                                 progState = 1;
 307                                                 CodeGen.Dupicate();
 308                                                 CodeGen.Dereference();
 309                                                 CodeGen.LoadConstant(1); 
 310                                                 CodeGen.BinaryOp(op);
 311                                                 CodeGen.Assign(des.type); .)
 312         )
 313      ) WEAK ";"
 314   .
 315 
 316   Arguments<DesType des>                     (. int argCount = 0;
 317                                                 Entry fp = des.entry.firstParam; .)
 318   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 319        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 320        }
 321      ]                                       (. if (argCount != des.entry.nParams)
 322                                                   SemError("wrong number of arguments"); 
 323                                                 progState = 1; .)
 324   .
 325 
 326   OneArg<Entry fp>                           (. int argType; .)
 327   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 328                                                   SemError("argument type mismatch"); 
 329                                                 progState = 1; .)
 330      )
 331   .
 332 
 333   Designator<out DesType des>                (. string name;
 334                                                 int indexType; .)
 335   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 336                                                 if (!entry.declared)
 337                                                   SemError("undeclared identifier");
 338                                                 progState = 1;
 339                                                 des = new DesType(entry);
 340                                                 if (entry.kind == Kinds.Var)
 341                                                   CodeGen.LoadAddress(entry); .)
 342      [     "["                               (. if (IsArray(des.type)) des.type--;
 343                                                 else { SemError("unexpected subscript");
 344                                                   progState = 1; }
 345                                                 if (des.entry.kind != Kinds.Var) {
 346                                                   SemError("unexpected subscript");
 347                                                   progState = 1; }
 348                                                 CodeGen.Dereference(); .)
 349               Expression<out indexType>      (. if (!IsArith(indexType)) {
 350                                                   SemError("invalid subscript type");
 351                                                 progState = 1; }
 352                                                 CodeGen.Index(); .)
 353            "]"
 354      ]
 355   .
 356 
 357   IfStatement<StackFrame frame, Label endBlock>
 358                                              (. Label falseLabel = new Label(!known),
 359                                                         endElse = new Label(!known); .)
 360   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 361         ["then"] Statement<frame, endBlock>  (.   CodeGen.Branch(endElse);
 362                                                 falseLabel.Here(); .)
 363      [ "else" Statement<frame, endBlock>
 364      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 365   .
 366 
 367   ElseIfStatement<StackFrame frame, Label endBlock>
 368                                              (. Label falseLabel = new Label(!known),
 369                                                         endElse = new Label(!known); .)
 370   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 371         ["then"] Statement<frame, endBlock>  (. CodeGen.Branch(endElse);
 372                                                 falseLabel.Here(); .)
 373      [ "else" Statement<frame, endBlock>
 374      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 375   .
 376 
 377   WhileStatement<StackFrame frame>
 378                                              (. Label loopExit  = new Label(!known);
 379                                                 Label loopStart = new Label(known); .)
 380   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 381      Statement<frame, loopExit>              (. CodeGen.Branch(loopStart);
 382                                                 loopExit.Here(); .)
 383   .
 384   
 385   DoWhileStatment<StackFrame frame>
 386                                              (. Label loopExit  = new Label(!known); 
 387                                                 Label loopStart = new Label(known); .)
 388   = "do" Statement<frame, loopExit>
 389     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 390                                              (. CodeGen.Branch(loopStart); .)
 391                                              (. loopExit.Here(); .)
 392  .
 393  
 394   ForStatement<StackFrame frame>
 395                                              
 396   = "for" ( NormalFor<frame> | FancyFor<frame> ) .
 397     
 398   NormalFor<StackFrame frame>                (. Label loopExit  = new Label(!known); 
 399                                                 Label loopStart = new Label(!known); .)
 400     
 401   =  
 402     "("                                      (. string name = ""; .)
 403     ( AssignmentOrCall    
 404     | Ident<out name> WEAK ";"               (. if(Table.Find(name) == null)
 405                                                   SemError("Undeclared Identifier: " + name); .)
 406     | VarDeclarations<frame> )
 407                                              (. loopStart.Here(); .)
 408     Condition                                (. CodeGen.BranchFalse(loopExit); .)
 409     WEAK ";"
 410     AssignmentOrCall
 411     ")"
 412     Statement<frame, loopExit>               (. CodeGen.Branch(loopStart); .)
 413                                              (. loopExit.Here(); .)
 414     .
 415 
 416     FancyFor<StackFrame frame>               (. Label loopExit  = new Label(!known);
 417                                                 Label stmStart  = new Label(!known); .)
 418     =                                        (. string name = ""; Entry e; .)
 419     Ident<out name>                          (. e = Table.Find(name); .)
 420                                              (. if(e == null) .)
 421                                              (.   SemError("Undeclared Identifier: " + name); .)
 422     "in"                                     (. int exprType = Types.noType; .)
 423     "("
 424                                              (. CodeGen.LoadAddress(e); .)
 425     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 426                                              (. CodeGen.Assign(exprType); .)
 427                                              (. CodeGen.JumpAndLink(stmStart); .)
 428     { ","
 429                                              (. CodeGen.LoadAddress(e); .)
 430     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 431                                              (. CodeGen.Assign(exprType); .)
 432                                              (. CodeGen.writeWord(PVM.jal); .)
 433                                              (. CodeGen.writeWord(stmStart.Address()); .)
 434     }                                        (. CodeGen.Branch(loopExit); .)
 435     ")"                                      (. stmStart.Here(); .)
 436     Statement<frame, loopExit>               (. CodeGen.JumpTOS(); .)
 437                                              (. loopExit.Here(); .)
 438   .
 439 
 440   HaltStatement
 441   =  "halt"
 442      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 443      WEAK ";"
 444   .
 445 
 446   ReturnStatement
 447   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 448     WEAK ";"
 449   .
 450 
 451   BreakStatement<Label Lb>
 452   = "break"
 453     WEAK ";"                                 (. CodeGen.Branch(Lb); .)
 454   .
 455 
 456   ReadStatement
 457   = (   "read"     "("   ReadList   ")"
 458       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 459     )
 460     WEAK ";"
 461   .
 462 
 463   ReadList
 464   = ReadElement { WEAK "," ReadElement }
 465   .
 466 
 467   ReadElement                                (. string str;
 468                                                 DesType des; .)
 469   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 470     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 471                                                   SemError("wrong kind of identifier");
 472                                                   progState = 1; }
 473                                                 switch (des.type) {
 474                                                   case Types.intType:
 475                                                   case Types.charType:
 476                                                   case Types.boolType:
 477                                                     CodeGen.Read(des.type); break;
 478                                                   default:
 479                                                     SemError("cannot read this type"); progState = 1; break;
 480                                                 } .)
 481   .
 482 
 483   WriteStatement
 484   = (   "write"     "("   WriteList   ")"
 485       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 486     )
 487     WEAK ";"
 488   .
 489 
 490   WriteList
 491   = WriteElement { WEAK "," WriteElement }
 492   .
 493 
 494   WriteElement                               (. int expType;
 495                                                 string str; .)
 496   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 497     | Expression<out expType>                (. if (!IsWritable(expType)) {
 498                                                   SemError("cannot write this type"); progState = 1; }
 499                                                 switch (expType) {
 500                                                   case Types.intType:
 501                                                   case Types.boolType:
 502                                                   case Types.charType:
 503                                                     CodeGen.Write(expType); break;
 504                                                   default:
 505                                                     break;
 506                                                 } .)
 507   .
 508 
 509   Condition                                  (. int type; .)
 510   =  Expression<out type>                    (. if (!IsBool(type)) {
 511                                                   SemError("Boolean expression needed"); progState = 1; } .)
 512   .
 513 
 514   Expression<out int type>                   (. int type2;
 515                                                 int op;
 516                                                 bool comparable; .)
 517   =  AddExp<out type>
 518      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 519                                                   case CodeGen.ceq: case CodeGen.cne:
 520                                                     comparable = Compatible(type, type2);
 521                                                     break;
 522                                                   default:
 523                                                     comparable = (IsArith(type) || IsChar(type)) 
 524                                                               && (IsArith(type2) || IsChar(type2));
 525                                                     break;
 526                                                 }
 527                                                 if (!comparable) {
 528                                                   SemError("incomparable operands");
 529                                                   progState = 1; }
 530                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 531      ]
 532   .
 533 
 534   AddExp<out int type>                       (. int type2;
 535                                                 int op;
 536                                                 Label shortcircuit = new Label(!known); .)
 537   =                                          (. type = Types.noType; .)
 538      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 539                                                   SemError("arithmetic operand needed"); 
 540                                                   progState = 1; } .)
 541        | "-" Term<out type>                  (. if (!IsArith(type)) {
 542                                                   SemError("arithmetic operand needed");
 543                                                   progState = 1; }
 544                                                 CodeGen.NegateInteger(); .)
 545        | Term<out type>
 546      )
 547      { AddOp<out op>                         (. if (op == CodeGen.or)
 548                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 549        Term<out type2>                       (. switch (op) {
 550                                                   case CodeGen.or:
 551                                                     if (!IsBool(type) || !IsBool(type2)) {
 552                                                       SemError("boolean operands needed"); 
 553                                                       progState = 1; }
 554                                                     type = Types.boolType;
 555                                                     break;
 556                                                   case CodeGen.add:
 557                                                     if((!IsArith(type) && !IsChar(type))
 558                                                     || (!IsArith(type2) && !IsChar(type2))) {
 559                                                       SemError("operand must be of type int or type char");
 560                                                       progState = 1;
 561                                                     }
 562                                                     type = IsChar(type) && IsChar(type2) ? Types.charType : Types.intType; 
 563                                                     CodeGen.BinaryOp(op);
 564                                                     break;
 565                                                   default:
 566                                                     if((!IsArith(type) && !IsChar(type))
 567                                                     || (!IsArith(type2) && !IsChar(type2))) {
 568                                                       SemError("arithmetic operands needed");
 569                                                       type = Types.noType;
 570                                                       progState = 1;
 571                                                     }
 572                                                     type = Types.intType;
 573                                                     CodeGen.BinaryOp(op);
 574                                                     break;
 575                                                 } .)
 576      }                                       (. shortcircuit.Here(); .)
 577   .
 578 
 579   Term<out int type>                         (. int type2;
 580                                                 int op;
 581                                                 Label shortcircuit = new Label(!known); .)
 582   =  Factor<out type>
 583      { MulOp<out op>                         (. if (op == CodeGen.and)
 584                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 585        Factor<out type2>                     (. switch (op) {
 586                                                   case CodeGen.and:
 587                                                     if (!IsBool(type) || !IsBool(type2)) {
 588                                                       SemError("boolean operands needed"); progState = 1; }
 589                                                     type = Types.boolType;
 590                                                     break;
 591                                                   default:
 592                                                     if (!IsArith(type) || !IsArith(type2)) {
 593                                                       SemError("arithmetic operands needed");
 594                                                       type = Types.noType;
 595                                                       progState = 1;
 596                                                     }
 597                                                     CodeGen.BinaryOp(op);
 598                                                     break;
 599                                                 } .)
 600      }                                       (. shortcircuit.Here(); .)
 601   .
 602 
 603   Factor<out int type>                       (. type = Types.noType;
 604                                                 int size;
 605                                                 DesType des;
 606                                                 ConstRec con; .)
 607   =    Designator<out des>                   (. type = des.type;
 608                                                 switch (des.entry.kind) {
 609                                                   case Kinds.Var:
 610                                                     CodeGen.Dereference();
 611                                                     break;
 612                                                   case Kinds.Con:
 613                                                     CodeGen.LoadConstant(des.entry.value);
 614                                                     break;
 615                                                   default:
 616                                                     SemError("wrong kind of identifier");
 617                                                     progState = 1;
 618                                                     break;
 619                                                 } .)
 620                                         
 621      | Constant<out con>                     (. type = con.type;
 622                                                 CodeGen.LoadConstant(con.value); .)
 623      | "new" BasicType<out type>             (. type++; .)
 624          "[" Expression<out size>            (. if (!IsArith(size)){
 625                                                   SemError("array size must be integer");
 626                                                   progState = 1; }
 627                                                 CodeGen.Allocate(); .)
 628          "]"
 629      | "length"
 630          "(" Designator<out des> ")"         (. if (!IsArray(des.type))
 631                                                   SemError("operand must be array type"); 
 632                                                 type = Types.intType; 
 633                                                 CodeGen.Dereference();
 634                                                 CodeGen.Dereference(); .)
 635      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 636                                                 else CodeGen.NegateBoolean();
 637                                                 type = Types.boolType; .)
 638      | "(" Expression<out type> ")"
 639   .
 640 
 641   AddOp<out int op>                          (. op = CodeGen.nop; .)
 642   =    "+"                                   (. op = CodeGen.add; .)
 643      | "-"                                   (. op = CodeGen.sub; .)
 644      | "||"                                  (. op = CodeGen.or;  .)
 645   .
 646 
 647   MulOp<out int op>                          (. op = CodeGen.nop; .)
 648   =    "*"                                   (. op = CodeGen.mul; .)
 649      | "/"                                   (. op = CodeGen.div; .)
 650      | "%"                                   (. op = CodeGen.rem; .)
 651      | "&&"                                  (. op = CodeGen.and; .)
 652   .
 653 
 654   RelOp<out int op>                          (. op = CodeGen.nop; .)
 655   =    "=="                                  (. op = CodeGen.ceq; .)
 656      | "!="                                  (. op = CodeGen.cne; .)
 657      | "<"                                   (. op = CodeGen.clt; .)
 658      | "<="                                  (. op = CodeGen.cle; .)
 659      | ">"                                   (. op = CodeGen.cgt; .)
 660      | ">="                                  (. op = CodeGen.cge; .)
 661   .
 662 
 663   IncOp<out int op>                          (. op = CodeGen.nop; .)
 664   =    "++"                                  (. op = CodeGen.add; .)
 665      | "--"                                  (. op = CodeGen.sub; .)
 666   .
 667 
 668   AssignOp = "=" .
 669 
 670   Ident<out string name>
 671   =  identifier                              (. name = token.val; .)
 672   .
 673 
 674   StringConst<out string str>
 675   =  stringLit                               (. str = token.val; .)
 676      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 677      }
 678                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 679   .
 680 
 681   CharConst<out int value>
 682   =  charLit                                 (. string str = token.val;
 683                                                 str = Unescape(str.Substring(1, str.Length - 2));
 684                                                 value = (int) str[0]; .)
 685   .
 686 
 687   IntConst<out int value>
 688   =  number                                  (. try {
 689                                                   value = Convert.ToInt32(token.val);
 690                                                 } catch (Exception) {
 691                                                   value = 0; SemError("number out of range"); progState = 1;
 692                                                 } .)
 693   .
 694 
 695 END Parva.
 696 

0 errors detected
7 warnings detected

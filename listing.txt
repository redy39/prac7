  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16   static int progState = 0;
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool Compatible(int typeOne, int typeTwo) {
  71   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  72     return    typeOne == typeTwo
  73            || IsArith(typeOne) && IsArith(typeTwo)
  74            || typeOne == Types.noType
  75            || typeTwo == Types.noType
  76            || IsArray(typeOne) && typeTwo == Types.nullType
  77            || IsArray(typeTwo) && typeOne == Types.nullType;
  78   } // Compatible
  79 
  80   static bool Assignable(int typeOne, int typeTwo) {
  81   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  82     return    typeOne == typeTwo
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType;
  86   } // Assignable
  87 
  88   static bool IsCall(out DesType des) {
  89   // Used as an LL(1) conflict resolver variable/function name
  90     Entry entry = Table.Find(la.val);
  91     des = new DesType(entry);
  92     return entry.kind == Kinds.Fun;
  93   } // IsCall
  94 
  95 
  96 /* -------------------------------------------------------------------------- */
  97 
  98 CHARACTERS
  99   lf         = CHR(10) .
 100   backslash  = CHR(92) .
 101   control    = CHR(0) .. CHR(31) .
 102   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 103   digit      = "0123456789" .
 104   stringCh   = ANY - '"' - control - backslash .
 105   charCh     = ANY - "'" - control - backslash .
 106   printable  = ANY - control .
 107 
 108 TOKENS
 109   identifier = letter { { "_" } (letter | digit) } .
 110   number     = digit { digit } .
 111   stringLit  = '"' { stringCh | backslash printable } '"' .
 112   charLit    = "'" ( charCh   | backslash printable ) "'" .
 113 
 114 PRAGMAS
 115   DebugOn     = "$D+" .                      (. debug = true; .)
 116   DebugOff    = "$D-" .                      (. debug = false; .)
 117   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 118   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 119   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 120   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 121   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 122   WarningsOn  = "$W+" .                      (. warnings = true; .)
 123   WarningsOff = "$W-" .                      (. warnings = false; .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                                              (. CodeGen.FrameHeader();
 134                                                 // no arguments
 135                                                 CodeGen.Call(mainEntryPoint);
 136                                                 // forward, incomplete
 137                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 138   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 139                                                   SemError("missing Main function"); progState = 1; .)
 140   .
 141 
 142   FuncDeclaration      
 143                                              (. StackFrame frame = new StackFrame();
 144                                                 Entry function = new Entry(); .)
 145   =  "void" Ident<out function.name>  
 146                                              (. function.kind = Kinds.Fun;
 147                                                 function.type = Types.voidType;
 148                                                 function.nParams = 0;
 149                                                 function.firstParam = null;
 150                                                 function.entryPoint = new Label(known);
 151                                                 Table.Insert(function);
 152                                                 Table.OpenScope(); .)
 153      "(" FormalParameters<function> ")"
 154                                              (. frame.size = CodeGen.headerSize + 
 155                                                 function.nParams;
 156                                                 if (function.name.ToUpper().Equals("MAIN")
 157                                                 && !mainEntryPoint.IsDefined()
 158                                                 && function.nParams == 0) {
 159                                                   mainEntryPoint.Here(); } .)
 160      Body<frame>                             (. Table.CloseScope(); .)
 161   .
 162 
 163   FormalParameters<Entry func>               (. Entry param; .)
 164   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 165       { WEAK "," OneParam<out param, func> }
 166     ] .
 167 
 168   OneParam<out Entry param, Entry func>
 169                                              (. param = new Entry();
 170                                                 param.kind = Kinds.Var;
 171                                                 param.offset = CodeGen.headerSize + func.nParams;
 172                                                 func.nParams++; .)
 173   =  Type<out param.type>
 174      Ident<out param.name>                   (. Table.Insert(param); .)
 175   .
 176 
 177   Body<StackFrame frame>                     (. Label DSPLabel = new Label(known);
 178                                                 int sizeMark = frame.size;
 179                                                 CodeGen.OpenStackFrame(0); .)
 180   =  "{" { Statement<frame> }
 181      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 182                                                 CodeGen.LeaveVoidFunction(); .)
 183 .
 184 
 185   Statement<StackFrame frame>
 186   =  SYNC (   Block<frame>
 187             | ConstDeclarations
 188             | VarDeclarations<frame>
 189             | AssignmentOrCall
 190             | IfStatement<frame>
 191             | WhileStatement<frame>
 192 			| DoWhileStm<frame>
 193             | HaltStatement
 194             | ReturnStatement
 195             | BreakStatement
 196             | ReadStatement
 197             | WriteStatement
 198             | ";"                            (. Warning("possible unintended empty statement"); .)
 199           ) .
 200 
 201   Block<StackFrame frame>
 202   =                                          (. Table.OpenScope();
 203                                                 bool empty = true;  .)
 204      "{" { Statement<frame> }                (. empty = false; .)
 205      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 206                                                 Table.CloseScope(); .)
 207   .
 208 
 209   ConstDeclarations
 210   = "const" OneConst { WEAK "," OneConst }
 211     WEAK ";"
 212   .
 213 
 214   OneConst                                   (. Entry constant = new Entry();
 215                                                 ConstRec con; .)
 216   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 217      AssignOp Constant<out con>              (. constant.value = con.value;
 218                                                 constant.type = con.type;
 219                                                 Table.Insert(constant); .)
 220   .
 221 
 222   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 223   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 224     | CharConst<out con.value>               (. con.type = Types.intType; .)
 225     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 226     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 227     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 228   .
 229 
 230   VarDeclarations<StackFrame frame>          (. int type; .)
 231   =  Type<out type>                          
 232      VarList<frame, type>
 233      WEAK ";"
 234   .
 235 
 236   Type<out int type>                         
 237   =   BasicType<out type>
 238        [ "[]"                                (. type++; .)
 239        ] .
 240 
 241   BasicType<out int type>                    (. type = Types.noType; .)
 242   =   "int"                                  (. type = Types.intType; .)
 243     | "bool"                                 (. type = Types.boolType; .)
 244   .
 245 
 246 
 247   VarList<StackFrame frame, int type>
 248   =  OneVar<frame, type>
 249      { WEAK "," OneVar<frame, type> }
 250   .
 251 
 252   OneVar<StackFrame frame, int type>         (. int expType;
 253                                                 Entry var = new Entry(); .)
 254   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 255                                                 var.type = type;
 256                                                 var.offset = frame.size;
 257                                                 frame.size++; .)
 258      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 259        Expression<out expType>               (. if (!Assignable(var.type, expType))
 260                                                   SemError("incompatible types in assignment");
 261                                                 progState = 1;
 262                                                 CodeGen.Assign(var.type); .)
 263      ]                                       (. Table.Insert(var); .)
 264   .
 265 
 266 
 267   AssignmentOrCall                           (. int expType;
 268                                                 DesType des; .)
 269   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 270          identifier                          (. CodeGen.FrameHeader(); .)
 271          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 272       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 273                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 274                                                 progState = 1; .)
 275          AssignOp
 276          Expression<out expType>             (. if (!Assignable(des.type, expType))
 277                                                   SemError("incompatible types in assignment");
 278                                                 progState = 1;
 279                                                 CodeGen.Assign(des.type); .)
 280      ) WEAK ";"
 281   .
 282 
 283   Arguments<DesType des>                     (. int argCount = 0;
 284                                                 Entry fp = des.entry.firstParam; .)
 285   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 286        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 287        }
 288      ]                                       (. if (argCount != des.entry.nParams)
 289                                                   SemError("wrong number of arguments"); 
 290                                                 progState = 1; .)
 291   .
 292 
 293   OneArg<Entry fp>                           (. int argType; .)
 294   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 295                                                   SemError("argument type mismatch"); 
 296                                                 progState = 1; .)
 297      )
 298   .
 299 
 300   Designator<out DesType des>                (. string name;
 301                                                 int indexType; .)
 302   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 303                                                 if (!entry.declared)
 304                                                   SemError("undeclared identifier");
 305                                                 progState = 1;
 306                                                 des = new DesType(entry);
 307                                                 if (entry.kind == Kinds.Var)
 308                                                   CodeGen.LoadAddress(entry); .)
 309      [     "["                               (. if (IsArray(des.type)) des.type--;
 310                                                 else { SemError("unexpected subscript");
 311                                                   progState = 1; }
 312                                                 if (des.entry.kind != Kinds.Var) {
 313                                                   SemError("unexpected subscript");
 314                                                   progState = 1; }
 315                                                 CodeGen.Dereference(); .)
 316               Expression<out indexType>      (. if (!IsArith(indexType)) {
 317                                                   SemError("invalid subscript type");
 318                                                 progState = 1; }
 319                                                 CodeGen.Index(); .)
 320            "]"
 321      ]
 322   .
 323 
 324   IfStatement<StackFrame frame>
 325                                              (. Label falseLabel = new Label(!known),
 326                                                         endElse = new Label(!known); .)
 327   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 328         ["then"] Statement<frame>            (. CodeGen.Branch(endElse);
 329                                                 falseLabel.Here(); .)
 330      [ "else" Statement<frame>
 331      | ElseIfStatement<frame> ]              (. endElse.Here(); .)
 332   .
 333 
 334   ElseIfStatement<StackFrame frame>
 335                                              (. Label falseLabel = new Label(!known),
 336                                                         endElse = new Label(!known); .)
 337   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 338         ["then"] Statement<frame>            (. CodeGen.Branch(endElse);
 339                                                 falseLabel.Here(); .)
 340      [ "else" Statement<frame>
 341      | ElseIfStatement<frame> ]              (. endElse.Here(); .)
 342   .
 343 
 344   WhileStatement<StackFrame frame>
 345                                              (. Label loopExit  = new Label(!known);
 346                                                 Label loopStart = new Label(known); .)
 347   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 348      Statement<frame>                        (. CodeGen.Branch(loopStart);
 349                                                 loopExit.Here(); .)
 350   .
 351   
 352   DoWhileStm<StackFrame frame>
 353                                              (. Label loopExit  = new Label(!known); 
 354                                                 Label loopStart = new Label(known); .)
 355   = "do" Statement<frame>
 356     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 357                                              (. CodeGen.Branch(loopStart); .)
 358 											 (. loopExit.Here(); .)
 359  .
 360   HaltStatement
 361   =  "halt"
 362      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 363      WEAK ";"
 364   .
 365 
 366   ReturnStatement
 367   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 368     WEAK ";"
 369   .
 370 
 371   BreakStatement
 372   = "break"
 373     WEAK ";"
 374   .
 375 
 376   ReadStatement
 377   = (   "read"     "("   ReadList   ")"
 378       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 379     )
 380     WEAK ";"
 381   .
 382 
 383   ReadList
 384   = ReadElement { WEAK "," ReadElement }
 385   .
 386 
 387   ReadElement                                (. string str;
 388                                                 DesType des; .)
 389   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 390     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 391                                                   SemError("wrong kind of identifier");
 392                                                   progState = 1; }
 393                                                 switch (des.type) {
 394                                                   case Types.intType:
 395                                                   case Types.boolType:
 396                                                     CodeGen.Read(des.type); break;
 397                                                   default:
 398                                                     SemError("cannot read this type"); progState = 1; break;
 399                                                 } .)
 400   .
 401 
 402   WriteStatement
 403   = (   "write"     "("   WriteList   ")"
 404       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 405     )
 406     WEAK ";"
 407   .
 408 
 409   WriteList
 410   = WriteElement { WEAK "," WriteElement }
 411   .
 412 
 413   WriteElement                               (. int expType;
 414                                                 string str; .)
 415   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 416     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType)) {
 417                                                   SemError("cannot write this type"); progState = 1; }
 418                                                 switch (expType) {
 419                                                   case Types.intType:
 420                                                   case Types.boolType:
 421                                                     CodeGen.Write(expType); break;
 422                                                   default:
 423                                                     break;
 424                                                 } .)
 425   .
 426 
 427   Condition                                  (. int type; .)
 428   =  Expression<out type>                    (. if (!IsBool(type)) {
 429                                                   SemError("Boolean expression needed"); progState = 1; } .)
 430   .
 431 
 432   Expression<out int type>                   (. int type2;
 433                                                 int op;
 434                                                 bool comparable; .)
 435   =  AddExp<out type>
 436      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 437                                                   case CodeGen.ceq: case CodeGen.cne:
 438                                                     comparable = Compatible(type, type2);
 439                                                     break;
 440                                                   default:
 441                                                     comparable = IsArith(type) && IsArith(type2);
 442                                                     break;
 443                                                 }
 444                                                 if (!comparable) {
 445                                                   SemError("incomparable operands");
 446                                                   progState = 1; }
 447                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 448      ]
 449   .
 450 
 451   AddExp<out int type>                       (. int type2;
 452                                                 int op;
 453                                                 Label shortcircuit = new Label(!known); .)
 454   =                                          (. type = Types.noType; .)
 455      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 456                                                   SemError("arithmetic operand needed"); 
 457                                                   progState = 1; } .)
 458        | "-" Term<out type>                  (. if (!IsArith(type)) {
 459                                                   SemError("arithmetic operand needed");
 460                                                   progState = 1; }
 461                                                 CodeGen.NegateInteger(); .)
 462        | Term<out type>
 463      )
 464      { AddOp<out op>                         (. if (op == CodeGen.or)
 465                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 466        Term<out type2>                       (. switch (op) {
 467                                                   case CodeGen.or:
 468                                                     if (!IsBool(type) || !IsBool(type2)) {
 469                                                       SemError("boolean operands needed"); 
 470                                                       progState = 1; }
 471                                                     type = Types.boolType;
 472                                                     break;
 473                                                   default:
 474                                                     if (!IsArith(type) || !IsArith(type2)) {
 475                                                       SemError("arithmetic operands needed");
 476                                                       type = Types.noType;
 477                                                       progState = 1;
 478                                                     }
 479                                                     CodeGen.BinaryOp(op);
 480                                                     break;
 481                                                 } .)
 482      }                                       (. shortcircuit.Here(); .)
 483   .
 484 
 485   Term<out int type>                         (. int type2;
 486                                                 int op;
 487                                                 Label shortcircuit = new Label(!known); .)
 488   =  Factor<out type>
 489      { MulOp<out op>                         (. if (op == CodeGen.and)
 490                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 491        Factor<out type2>                     (. switch (op) {
 492                                                   case CodeGen.and:
 493                                                     if (!IsBool(type) || !IsBool(type2)) {
 494                                                       SemError("boolean operands needed"); progState = 1; }
 495                                                     type = Types.boolType;
 496                                                     break;
 497                                                   default:
 498                                                     if (!IsArith(type) || !IsArith(type2)) {
 499                                                       SemError("arithmetic operands needed");
 500                                                       type = Types.noType;
 501                                                       progState = 1;
 502                                                     }
 503                                                     CodeGen.BinaryOp(op);
 504                                                     break;
 505                                                 } .)
 506      }                                       (. shortcircuit.Here(); .)
 507   .
 508 
 509   Factor<out int type>                       (. type = Types.noType;
 510                                                 int size;
 511                                                 DesType des;
 512                                                 ConstRec con; .)
 513   =    Designator<out des>                   (. type = des.type;
 514                                                 switch (des.entry.kind) {
 515                                                   case Kinds.Var:
 516                                                     CodeGen.Dereference();
 517                                                     break;
 518                                                   case Kinds.Con:
 519                                                     CodeGen.LoadConstant(des.entry.value);
 520                                                     break;
 521                                                   default:
 522                                                     SemError("wrong kind of identifier");
 523                                                     progState = 1;
 524                                                     break;
 525                                                 } .)
 526                                         
 527      | Constant<out con>                     (. type = con.type;
 528                                                 CodeGen.LoadConstant(con.value); .)
 529      | "new" BasicType<out type>             (. type++; .)
 530          "[" Expression<out size>            (. if (!IsArith(size)){
 531                                                   SemError("array size must be integer");
 532                                                   progState = 1; }
 533                                                 CodeGen.Allocate(); .)
 534          "]"
 535      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 536                                                 else CodeGen.NegateBoolean();
 537                                                 type = Types.boolType; .)
 538      | "(" Expression<out type> ")"
 539   .
 540 
 541   AddOp<out int op>                          (. op = CodeGen.nop; .)
 542   =    "+"                                   (. op = CodeGen.add; .)
 543      | "-"                                   (. op = CodeGen.sub; .)
 544      | "||"                                  (. op = CodeGen.or;  .)
 545   .
 546 
 547   MulOp<out int op>                          (. op = CodeGen.nop; .)
 548   =    "*"                                   (. op = CodeGen.mul; .)
 549      | "/"                                   (. op = CodeGen.div; .)
 550      | "%"                                   (. op = CodeGen.rem; .)
 551      | "&&"                                  (. op = CodeGen.and; .)
 552   .
 553 
 554   RelOp<out int op>                          (. op = CodeGen.nop; .)
 555   =    "=="                                  (. op = CodeGen.ceq; .)
 556      | "!="                                  (. op = CodeGen.cne; .)
 557      | "<"                                   (. op = CodeGen.clt; .)
 558      | "<="                                  (. op = CodeGen.cle; .)
 559      | ">"                                   (. op = CodeGen.cgt; .)
 560      | ">="                                  (. op = CodeGen.cge; .)
 561   .
 562 
 563   AssignOp = "=" .
 564 
 565   Ident<out string name>
 566   =  identifier                              (. name = token.val; .)
 567   .
 568 
 569   StringConst<out string str>
 570   =  stringLit                               (. str = token.val; .)
 571      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 572      }
 573                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 574   .
 575 
 576   CharConst<out int value>
 577   =  charLit                                 (. string str = token.val;
 578                                                 str = Unescape(str.Substring(1, str.Length - 2));
 579                                                 value = str[0]; .)
 580   .
 581 
 582   IntConst<out int value>
 583   =  number                                  (. try {
 584                                                   value = Convert.ToInt32(token.val);
 585                                                 } catch (Exception) {
 586                                                   value = 0; SemError("number out of range"); progState = 1;
 587                                                 } .)
 588   .
 589 
 590 END Parva.
 591 

0 errors detected
6 warnings detected

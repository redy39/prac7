  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ForStatement: identifier is the start of several alternatives
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16   static int progState = 0;
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool Compatible(int typeOne, int typeTwo) {
  71   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  72     return    typeOne == typeTwo
  73            || IsArith(typeOne) && IsArith(typeTwo)
  74            || typeOne == Types.noType
  75            || typeTwo == Types.noType
  76            || IsArray(typeOne) && typeTwo == Types.nullType
  77            || IsArray(typeTwo) && typeOne == Types.nullType;
  78   } // Compatible
  79 
  80   static bool Assignable(int typeOne, int typeTwo) {
  81   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  82     return    typeOne == typeTwo
  83            || typeOne == Types.noType
  84            || typeTwo == Types.noType
  85            || IsArray(typeOne) && typeTwo == Types.nullType;
  86   } // Assignable
  87 
  88   static bool IsCall(out DesType des) {
  89   // Used as an LL(1) conflict resolver variable/function name
  90     Entry entry = Table.Find(la.val);
  91     des = new DesType(entry);
  92     return entry.kind == Kinds.Fun;
  93   } // IsCall
  94 
  95 
  96 /* -------------------------------------------------------------------------- */
  97 
  98 CHARACTERS
  99   lf         = CHR(10) .
 100   backslash  = CHR(92) .
 101   control    = CHR(0) .. CHR(31) .
 102   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 103   digit      = "0123456789" .
 104   stringCh   = ANY - '"' - control - backslash .
 105   charCh     = ANY - "'" - control - backslash .
 106   printable  = ANY - control .
 107 
 108 TOKENS
 109   identifier = letter { { "_" } (letter | digit) } .
 110   number     = digit { digit } .
 111   stringLit  = '"' { stringCh | backslash printable } '"' .
 112   charLit    = "'" ( charCh   | backslash printable ) "'" .
 113 
 114 PRAGMAS
 115   DebugOn     = "$D+" .                      (. debug = true; .)
 116   DebugOff    = "$D-" .                      (. debug = false; .)
 117   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 118   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 119   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 120   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 121   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 122   WarningsOn  = "$W+" .                      (. warnings = true; .)
 123   WarningsOff = "$W-" .                      (. warnings = false; .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                                              (. CodeGen.FrameHeader();
 134                                                 // no arguments
 135                                                 CodeGen.Call(mainEntryPoint);
 136                                                 // forward, incomplete
 137                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 138   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 139                                                   SemError("missing Main function"); progState = 1; .)
 140   .
 141 
 142   FuncDeclaration      
 143                                              (. StackFrame frame = new StackFrame();
 144                                                 Entry function = new Entry(); .)
 145   =  "void" Ident<out function.name>  
 146                                              (. function.kind = Kinds.Fun;
 147                                                 function.type = Types.voidType;
 148                                                 function.nParams = 0;
 149                                                 function.firstParam = null;
 150                                                 function.entryPoint = new Label(known);
 151                                                 Table.Insert(function);
 152                                                 Table.OpenScope(); .)
 153      "(" FormalParameters<function> ")"
 154                                              (. frame.size = CodeGen.headerSize + 
 155                                                 function.nParams;
 156                                                 if (function.name.ToUpper().Equals("MAIN")
 157                                                 && !mainEntryPoint.IsDefined()
 158                                                 && function.nParams == 0) {
 159                                                   mainEntryPoint.Here(); } .)
 160      Body<frame>                             (. Table.CloseScope(); .)
 161   .
 162 
 163   FormalParameters<Entry func>               (. Entry param; .)
 164   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 165       { WEAK "," OneParam<out param, func> }
 166     ] .
 167 
 168   OneParam<out Entry param, Entry func>
 169                                              (. param = new Entry();
 170                                                 param.kind = Kinds.Var;
 171                                                 param.offset = CodeGen.headerSize + func.nParams;
 172                                                 func.nParams++; .)
 173   =  Type<out param.type>
 174      Ident<out param.name>                   (. Table.Insert(param); .)
 175   .
 176 
 177   Body<StackFrame frame>                     (. Label Lbend = new Label(!known); 
 178                                                 Label DSPLabel = new Label(known);
 179                                                 int sizeMark = frame.size;
 180                                                 CodeGen.OpenStackFrame(0); .)
 181   =  "{" { Statement<frame, Lbend> }
 182      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 183                                                 Lbend.Here();
 184 												CodeGen.LeaveVoidFunction(); .)
 185 .                                        
 186 
 187   Statement<StackFrame frame, Label label>
 188   =  SYNC (   Block<frame, label>
 189             | ConstDeclarations
 190             | VarDeclarations<frame>
 191             | AssignmentOrCall
 192             | IfStatement<frame, label>
 193             | WhileStatement<frame>
 194 			| DoWhileStatment<frame>
 195 			| ForStatement<frame>
 196             | HaltStatement
 197             | ReturnStatement
 198             | BreakStatement<label>
 199             | ReadStatement
 200             | WriteStatement
 201             | ";"                            (. Warning("possible unintended empty statement"); .)
 202           ) .
 203 
 204   Block<StackFrame frame, Label Lbend>
 205   =                                          (. Table.OpenScope();
 206                                                 bool empty = true;  .)
 207      "{" { Statement<frame, Lbend> }                (. empty = false; .)
 208      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 209                                                 Table.CloseScope(); .)
 210   .
 211 
 212   ConstDeclarations
 213   = "const" OneConst { WEAK "," OneConst }
 214     WEAK ";"
 215   .
 216 
 217   OneConst                                   (. Entry constant = new Entry();
 218                                                 ConstRec con; .)
 219   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 220      AssignOp Constant<out con>              (. constant.value = con.value;
 221                                                 constant.type = con.type;
 222                                                 Table.Insert(constant); .)
 223   .
 224 
 225   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 226   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 227     | CharConst<out con.value>               (. con.type = Types.intType; .)
 228     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 229     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 230     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 231   .
 232 
 233   VarDeclarations<StackFrame frame>          (. int type; .)
 234   =  Type<out type>                          
 235      VarList<frame, type>
 236      WEAK ";"
 237   .
 238 
 239   Type<out int type>                         
 240   =   BasicType<out type>
 241        [ "[]"                                (. type++; .)
 242        ] .
 243 
 244   BasicType<out int type>                    (. type = Types.noType; .)
 245   =   "int"                                  (. type = Types.intType; .)
 246     | "bool"                                 (. type = Types.boolType; .)
 247   .
 248 
 249 
 250   VarList<StackFrame frame, int type>
 251   =  OneVar<frame, type>
 252      { WEAK "," OneVar<frame, type> }
 253   .
 254 
 255   OneVar<StackFrame frame, int type>         (. int expType;
 256                                                 Entry var = new Entry(); .)
 257   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 258                                                 var.type = type;
 259                                                 var.offset = frame.size;
 260                                                 frame.size++; .)
 261      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 262        Expression<out expType>               (. if (!Assignable(var.type, expType))
 263                                                   SemError("incompatible types in assignment");
 264                                                 progState = 1;
 265                                                 CodeGen.Assign(var.type); .)
 266      ]                                       (. Table.Insert(var); .)
 267   .
 268 
 269 
 270   AssignmentOrCall                           (. int expType;
 271                                                 DesType des; .)
 272   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 273          identifier                          (. CodeGen.FrameHeader(); .)
 274          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 275       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 276                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 277                                                 progState = 1; .)
 278          AssignOp
 279          Expression<out expType>             (. if (!Assignable(des.type, expType))
 280                                                   SemError("incompatible types in assignment");
 281                                                 progState = 1;
 282                                                 CodeGen.Assign(des.type); .)
 283      ) WEAK ";"
 284   .
 285 
 286   Arguments<DesType des>                     (. int argCount = 0;
 287                                                 Entry fp = des.entry.firstParam; .)
 288   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 289        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 290        }
 291      ]                                       (. if (argCount != des.entry.nParams)
 292                                                   SemError("wrong number of arguments"); 
 293                                                 progState = 1; .)
 294   .
 295 
 296   OneArg<Entry fp>                           (. int argType; .)
 297   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 298                                                   SemError("argument type mismatch"); 
 299                                                 progState = 1; .)
 300      )
 301   .
 302 
 303   Designator<out DesType des>                (. string name;
 304                                                 int indexType; .)
 305   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 306                                                 if (!entry.declared)
 307                                                   SemError("undeclared identifier");
 308                                                 progState = 1;
 309                                                 des = new DesType(entry);
 310                                                 if (entry.kind == Kinds.Var)
 311                                                   CodeGen.LoadAddress(entry); .)
 312      [     "["                               (. if (IsArray(des.type)) des.type--;
 313                                                 else { SemError("unexpected subscript");
 314                                                   progState = 1; }
 315                                                 if (des.entry.kind != Kinds.Var) {
 316                                                   SemError("unexpected subscript");
 317                                                   progState = 1; }
 318                                                 CodeGen.Dereference(); .)
 319               Expression<out indexType>      (. if (!IsArith(indexType)) {
 320                                                   SemError("invalid subscript type");
 321                                                 progState = 1; }
 322                                                 CodeGen.Index(); .)
 323            "]"
 324      ]
 325   .
 326 
 327   IfStatement<StackFrame frame, Label endBlock>
 328                                              (. Label falseLabel = new Label(!known),
 329                                                         endElse = new Label(!known); .)
 330   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 331         ["then"] Statement<frame, endBlock>  (.   CodeGen.Branch(endElse);
 332                                                 falseLabel.Here(); .)
 333      [ "else" Statement<frame, endBlock>
 334      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 335   .
 336 
 337   ElseIfStatement<StackFrame frame, Label endBlock>
 338                                              (. Label falseLabel = new Label(!known),
 339                                                         endElse = new Label(!known); .)
 340   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 341         ["then"] Statement<frame, endBlock>  (. CodeGen.Branch(endElse);
 342                                                 falseLabel.Here(); .)
 343      [ "else" Statement<frame, endBlock>
 344      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 345   .
 346 
 347   WhileStatement<StackFrame frame>
 348                                              (. Label loopExit  = new Label(!known);
 349                                                 Label loopStart = new Label(known); .)
 350   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 351      Statement<frame, loopExit>              (. CodeGen.Branch(loopStart);
 352                                                 loopExit.Here(); .)
 353   .
 354   
 355   DoWhileStatment<StackFrame frame>
 356                                              (. Label loopExit  = new Label(!known); 
 357                                                 Label loopStart = new Label(known); .)
 358   = "do" Statement<frame, loopExit>
 359     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 360                                              (. CodeGen.Branch(loopStart); .)
 361 											 (. loopExit.Here(); .)
 362  .
 363  
 364   ForStatement<StackFrame frame>
 365                                              (. Label loopExit  = new Label(!known); 
 366                                                 Label loopStart = new Label(!known); .)
 367   = "for" "("                                (. string name = ""; .)
 368     ( AssignmentOrCall    
 369     | Ident<out name> WEAK ";"               (. if(Table.Find(name) == null) SemError("Undeclared Identifier: " + name); .)
 370     | VarDeclarations<frame> )
 371                                              (. loopStart.Here(); .)
 372     Condition                                (. CodeGen.BranchFalse(loopExit); .)
 373     WEAK ";"
 374     AssignmentOrCall
 375     ")"
 376     Statement<frame, loopExit>               (. CodeGen.Branch(loopStart);
 377                                                 loopExit.Here(); .)
 378   .
 379   HaltStatement
 380   =  "halt"
 381      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 382      WEAK ";"
 383   .
 384 
 385   ReturnStatement
 386   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 387     WEAK ";"
 388   .
 389 
 390   BreakStatement<Label Lb>
 391   = "break"
 392     WEAK ";"                                 (. CodeGen.Branch(Lb); .)
 393   .
 394 
 395   ReadStatement
 396   = (   "read"     "("   ReadList   ")"
 397       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 398     )
 399     WEAK ";"
 400   .
 401 
 402   ReadList
 403   = ReadElement { WEAK "," ReadElement }
 404   .
 405 
 406   ReadElement                                (. string str;
 407                                                 DesType des; .)
 408   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 409     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 410                                                   SemError("wrong kind of identifier");
 411                                                   progState = 1; }
 412                                                 switch (des.type) {
 413                                                   case Types.intType:
 414                                                   case Types.boolType:
 415                                                     CodeGen.Read(des.type); break;
 416                                                   default:
 417                                                     SemError("cannot read this type"); progState = 1; break;
 418                                                 } .)
 419   .
 420 
 421   WriteStatement
 422   = (   "write"     "("   WriteList   ")"
 423       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 424     )
 425     WEAK ";"
 426   .
 427 
 428   WriteList
 429   = WriteElement { WEAK "," WriteElement }
 430   .
 431 
 432   WriteElement                               (. int expType;
 433                                                 string str; .)
 434   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 435     | Expression<out expType>                (. if (!(IsArith(expType) || expType == Types.boolType)) {
 436                                                   SemError("cannot write this type"); progState = 1; }
 437                                                 switch (expType) {
 438                                                   case Types.intType:
 439                                                   case Types.boolType:
 440                                                     CodeGen.Write(expType); break;
 441                                                   default:
 442                                                     break;
 443                                                 } .)
 444   .
 445 
 446   Condition                                  (. int type; .)
 447   =  Expression<out type>                    (. if (!IsBool(type)) {
 448                                                   SemError("Boolean expression needed"); progState = 1; } .)
 449   .
 450 
 451   Expression<out int type>                   (. int type2;
 452                                                 int op;
 453                                                 bool comparable; .)
 454   =  AddExp<out type>
 455      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 456                                                   case CodeGen.ceq: case CodeGen.cne:
 457                                                     comparable = Compatible(type, type2);
 458                                                     break;
 459                                                   default:
 460                                                     comparable = IsArith(type) && IsArith(type2);
 461                                                     break;
 462                                                 }
 463                                                 if (!comparable) {
 464                                                   SemError("incomparable operands");
 465                                                   progState = 1; }
 466                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 467      ]
 468   .
 469 
 470   AddExp<out int type>                       (. int type2;
 471                                                 int op;
 472                                                 Label shortcircuit = new Label(!known); .)
 473   =                                          (. type = Types.noType; .)
 474      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 475                                                   SemError("arithmetic operand needed"); 
 476                                                   progState = 1; } .)
 477        | "-" Term<out type>                  (. if (!IsArith(type)) {
 478                                                   SemError("arithmetic operand needed");
 479                                                   progState = 1; }
 480                                                 CodeGen.NegateInteger(); .)
 481        | Term<out type>
 482      )
 483      { AddOp<out op>                         (. if (op == CodeGen.or)
 484                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 485        Term<out type2>                       (. switch (op) {
 486                                                   case CodeGen.or:
 487                                                     if (!IsBool(type) || !IsBool(type2)) {
 488                                                       SemError("boolean operands needed"); 
 489                                                       progState = 1; }
 490                                                     type = Types.boolType;
 491                                                     break;
 492                                                   default:
 493                                                     if (!IsArith(type) || !IsArith(type2)) {
 494                                                       SemError("arithmetic operands needed");
 495                                                       type = Types.noType;
 496                                                       progState = 1;
 497                                                     }
 498                                                     CodeGen.BinaryOp(op);
 499                                                     break;
 500                                                 } .)
 501      }                                       (. shortcircuit.Here(); .)
 502   .
 503 
 504   Term<out int type>                         (. int type2;
 505                                                 int op;
 506                                                 Label shortcircuit = new Label(!known); .)
 507   =  Factor<out type>
 508      { MulOp<out op>                         (. if (op == CodeGen.and)
 509                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 510        Factor<out type2>                     (. switch (op) {
 511                                                   case CodeGen.and:
 512                                                     if (!IsBool(type) || !IsBool(type2)) {
 513                                                       SemError("boolean operands needed"); progState = 1; }
 514                                                     type = Types.boolType;
 515                                                     break;
 516                                                   default:
 517                                                     if (!IsArith(type) || !IsArith(type2)) {
 518                                                       SemError("arithmetic operands needed");
 519                                                       type = Types.noType;
 520                                                       progState = 1;
 521                                                     }
 522                                                     CodeGen.BinaryOp(op);
 523                                                     break;
 524                                                 } .)
 525      }                                       (. shortcircuit.Here(); .)
 526   .
 527 
 528   Factor<out int type>                       (. type = Types.noType;
 529                                                 int size;
 530                                                 DesType des;
 531                                                 ConstRec con; .)
 532   =    Designator<out des>                   (. type = des.type;
 533                                                 switch (des.entry.kind) {
 534                                                   case Kinds.Var:
 535                                                     CodeGen.Dereference();
 536                                                     break;
 537                                                   case Kinds.Con:
 538                                                     CodeGen.LoadConstant(des.entry.value);
 539                                                     break;
 540                                                   default:
 541                                                     SemError("wrong kind of identifier");
 542                                                     progState = 1;
 543                                                     break;
 544                                                 } .)
 545                                         
 546      | Constant<out con>                     (. type = con.type;
 547                                                 CodeGen.LoadConstant(con.value); .)
 548      | "new" BasicType<out type>             (. type++; .)
 549          "[" Expression<out size>            (. if (!IsArith(size)){
 550                                                   SemError("array size must be integer");
 551                                                   progState = 1; }
 552                                                 CodeGen.Allocate(); .)
 553          "]"
 554      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 555                                                 else CodeGen.NegateBoolean();
 556                                                 type = Types.boolType; .)
 557      | "(" Expression<out type> ")"
 558   .
 559 
 560   AddOp<out int op>                          (. op = CodeGen.nop; .)
 561   =    "+"                                   (. op = CodeGen.add; .)
 562      | "-"                                   (. op = CodeGen.sub; .)
 563      | "||"                                  (. op = CodeGen.or;  .)
 564   .
 565 
 566   MulOp<out int op>                          (. op = CodeGen.nop; .)
 567   =    "*"                                   (. op = CodeGen.mul; .)
 568      | "/"                                   (. op = CodeGen.div; .)
 569      | "%"                                   (. op = CodeGen.rem; .)
 570      | "&&"                                  (. op = CodeGen.and; .)
 571   .
 572 
 573   RelOp<out int op>                          (. op = CodeGen.nop; .)
 574   =    "=="                                  (. op = CodeGen.ceq; .)
 575      | "!="                                  (. op = CodeGen.cne; .)
 576      | "<"                                   (. op = CodeGen.clt; .)
 577      | "<="                                  (. op = CodeGen.cle; .)
 578      | ">"                                   (. op = CodeGen.cgt; .)
 579      | ">="                                  (. op = CodeGen.cge; .)
 580   .
 581 
 582   AssignOp = "=" .
 583 
 584   Ident<out string name>
 585   =  identifier                              (. name = token.val; .)
 586   .
 587 
 588   StringConst<out string str>
 589   =  stringLit                               (. str = token.val; .)
 590      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 591      }
 592                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 593   .
 594 
 595   CharConst<out int value>
 596   =  charLit                                 (. string str = token.val;
 597                                                 str = Unescape(str.Substring(1, str.Length - 2));
 598                                                 value = str[0]; .)
 599   .
 600 
 601   IntConst<out int value>
 602   =  number                                  (. try {
 603                                                   value = Convert.ToInt32(token.val);
 604                                                 } catch (Exception) {
 605                                                   value = 0; SemError("number out of range"); progState = 1;
 606                                                 } .)
 607   .
 608 
 609 END Parva.
 610 

0 errors detected
7 warnings detected

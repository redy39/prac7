  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in ElseIfStatement: "elseif" is the start & successor of a deletable structure
  LL1 warning in NormalFor: identifier is the start of several alternatives

   1 using Library;
   2 
   3 COMPILER Parva $NC
   4 /* Parva level 1 grammar  - Coco/R for C#
   5    P.D. Terry, Rhodes University, 2015
   6    Pascal/Modula operator precedences with short circuit evaluation
   7    Void functions, value parameter passing
   8    No globals or value returning functions
   9    int and bool types supported
  10    Bradshaw -- version for Practical 7, 2019
  11    Adapted by Redy van Dyk && Scott Burnett - Group Q */
  12   public static bool // tied to pragmas/directives
  13     debug    = false,
  14     listCode = false,
  15     warnings = true;
  16   static int progState = 0;
  17   const bool
  18     known = true;
  19 
  20   // This next method might better be located in the code generator.  Traditionally
  21   // it has been left in the ATG file, but that might change in future years
  22   //
  23   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab,
  24   // other sequences like \x \: and \9 simply map to x, ; and 9 .  Most students don't seem
  25   // to know this!
  26 
  27   static string Unescape(string s) {
  28   /* Replaces escape sequences in s by their Unicode values */
  29     StringBuilder buf = new StringBuilder();
  30     int i = 0;
  31     while (i < s.Length) {
  32       if (s[i] == '\\') {
  33         switch (s[i+1]) {
  34           case '\\': buf.Append('\\'); break;
  35           case '\'': buf.Append('\''); break;
  36           case '\"': buf.Append('\"'); break;
  37           case  'r': buf.Append('\r'); break;
  38           case  'n': buf.Append('\n'); break;
  39           case  't': buf.Append('\t'); break;
  40           case  'b': buf.Append('\b'); break;
  41           case  'f': buf.Append('\f'); break;
  42           default:   buf.Append(s[i+1]); break;
  43         }
  44         i += 2;
  45       }
  46       else {
  47         buf.Append(s[i]);
  48         i++;
  49       }
  50     }
  51     return buf.ToString();
  52   } // Unescape
  53 
  54   // the following is global for expediency (fewer parameters needed)
  55 
  56   static Label mainEntryPoint = new Label(!known);
  57 
  58   static bool IsArith(int type) {
  59     return type == Types.intType || type == Types.noType;
  60   } // IsArith
  61 
  62   static bool IsBool(int type) {
  63     return type == Types.boolType || type == Types.noType;
  64   } // IsBool
  65 
  66   static bool IsArray(int type) {
  67     return (type % 2) == 1;
  68   } // IsArray
  69 
  70   static bool IsChar(int type) {
  71     return (type == Types.charType);
  72   }
  73   
  74   static bool IsWritable(int type) {
  75     return (type == Types.intType || type == Types.charType);
  76   }
  77 
  78   static bool Compatible(int typeOne, int typeTwo) {
  79   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  80     return    typeOne == typeTwo
  81            || IsArith(typeOne) && IsArith(typeTwo)
  82            || typeOne == Types.noType
  83            || typeTwo == Types.noType
  84            || IsArray(typeOne) && typeTwo == Types.nullType
  85            || IsArray(typeTwo) && typeOne == Types.nullType;
  86   } // Compatible
  87 
  88   static bool Assignable(int typeOne, int typeTwo) {
  89   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  90     return    typeOne == typeTwo
  91            || typeOne == Types.noType
  92            || typeTwo == Types.noType
  93            || IsArray(typeOne) && typeTwo == Types.nullType;
  94   } // Assignable
  95 
  96   static bool IsCall(out DesType des) {
  97   // Used as an LL(1) conflict resolver variable/function name
  98     Entry entry = Table.Find(la.val);
  99     des = new DesType(entry);
 100     return entry.kind == Kinds.Fun;
 101   } // IsCall
 102 
 103 
 104 /* -------------------------------------------------------------------------- */
 105 
 106 CHARACTERS
 107   lf         = CHR(10) .
 108   backslash  = CHR(92) .
 109   control    = CHR(0) .. CHR(31) .
 110   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 111   digit      = "0123456789" .
 112   stringCh   = ANY - '"' - control - backslash .
 113   charCh     = ANY - "'" - control - backslash .
 114   printable  = ANY - control .
 115 
 116 TOKENS
 117   identifier = letter { { "_" } (letter | digit) } .
 118   number     = digit { digit } .
 119   stringLit  = '"' { stringCh | backslash printable } '"' .
 120   charLit    = "'" ( charCh   | backslash printable ) "'" .
 121 
 122 PRAGMAS
 123   DebugOn     = "$D+" .                      (. debug = true; .)
 124   DebugOff    = "$D-" .                      (. debug = false; .)
 125   StackDump   = "$SD" .                      (. CodeGen.Stack(); .)
 126   HeapDump    = "$HD" .                      (. CodeGen.Heap(); .)
 127   TableDump   = "$ST" .                      (. Table.PrintTable(OutFile.StdOut); .)
 128   CodeGenOn   = "$C+" .                      (. listCode = true; .)
 129   CodeGenOff  = "$C-" .                      (. listCode = false; .)
 130   WarningsOn  = "$W+" .                      (. warnings = true; .)
 131   WarningsOff = "$W-" .                      (. warnings = false; .)
 132 
 133 COMMENTS FROM "//" TO lf
 134 COMMENTS FROM "/*" TO "*/"
 135 
 136 IGNORE CHR(9) .. CHR(13)
 137 
 138 PRODUCTIONS
 139 
 140   Parva
 141                                              (. CodeGen.FrameHeader();
 142                                                 // no arguments
 143                                                 CodeGen.Call(mainEntryPoint);
 144                                                 // forward, incomplete
 145                                                 CodeGen.LeaveProgram(); .)     // return to O/S
 146   = {   FuncDeclaration } EOF                (. if(!mainEntryPoint.IsDefined())
 147                                                   SemError("missing Main function"); progState = 1; .)
 148   .
 149 
 150   FuncDeclaration      
 151                                              (. StackFrame frame = new StackFrame();
 152                                                 Entry function = new Entry(); .)
 153   =  "void" Ident<out function.name>  
 154                                              (. function.kind = Kinds.Fun;
 155                                                 function.type = Types.voidType;
 156                                                 function.nParams = 0;
 157                                                 function.firstParam = null;
 158                                                 function.entryPoint = new Label(known);
 159                                                 Table.Insert(function);
 160                                                 Table.OpenScope(); .)
 161      "(" FormalParameters<function> ")"
 162                                              (. frame.size = CodeGen.headerSize + 
 163                                                 function.nParams;
 164                                                 if (function.name.ToUpper().Equals("MAIN")
 165                                                 && !mainEntryPoint.IsDefined()
 166                                                 && function.nParams == 0) {
 167                                                   mainEntryPoint.Here(); } .)
 168      Body<frame>                             (. Table.CloseScope(); .)
 169   .
 170 
 171   FormalParameters<Entry func>               (. Entry param; .)
 172   = [ OneParam<out param, func>              (. func.firstParam = param; .)
 173       { WEAK "," OneParam<out param, func> }
 174     ] .
 175 
 176   OneParam<out Entry param, Entry func>
 177                                              (. param = new Entry();
 178                                                 param.kind = Kinds.Var;
 179                                                 param.offset = CodeGen.headerSize + func.nParams;
 180                                                 func.nParams++; .)
 181   =  Type<out param.type>
 182      Ident<out param.name>                   (. Table.Insert(param); .)
 183   .
 184 
 185   Body<StackFrame frame>                     (. Label Lbend = new Label(!known); 
 186                                                 Label DSPLabel = new Label(known);
 187                                                 int sizeMark = frame.size;
 188                                                 CodeGen.OpenStackFrame(0); .)
 189   =  "{" { Statement<frame, Lbend> }
 190      WEAK "}"                                (. CodeGen.FixDSP(DSPLabel.Address(), frame.size - sizeMark);
 191                                                 Lbend.Here();
 192                                                 CodeGen.LeaveVoidFunction(); .)
 193 .                                        
 194 
 195   Statement<StackFrame frame, Label label>
 196   =  SYNC (   Block<frame, label>
 197             | ConstDeclarations
 198             | VarDeclarations<frame>
 199             | AssignmentOrCall
 200             | IfStatement<frame, label>
 201             | WhileStatement<frame>
 202             | DoWhileStatment<frame>
 203             | ForStatement<frame>
 204             | HaltStatement
 205             | ReturnStatement
 206             | BreakStatement<label>
 207             | ReadStatement
 208             | WriteStatement
 209             | ";"                            (. Warning("possible unintended empty statement"); .)
 210           ) .
 211 
 212   Block<StackFrame frame, Label Lbend>
 213   =                                          (. Table.OpenScope();
 214                                                 bool empty = true;  .)
 215      "{" { Statement<frame, Lbend> }                (. empty = false; .)
 216      WEAK "}"                                (. if (empty) Warning("possible unintended empty block");
 217                                                 Table.CloseScope(); .)
 218   .
 219 
 220   ConstDeclarations
 221   = "const" OneConst { WEAK "," OneConst }
 222     WEAK ";"
 223   .
 224 
 225   OneConst                                   (. Entry constant = new Entry();
 226                                                 ConstRec con; .)
 227   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 228      AssignOp Constant<out con>              (. constant.value = con.value;
 229                                                 constant.type = con.type;
 230                                                 Table.Insert(constant); .)
 231   .
 232 
 233   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 234   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 235     | CharConst<out con.value>               (. con.type = Types.charType; .)
 236     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 237     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 238     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 239   .
 240 
 241   VarDeclarations<StackFrame frame>          (. int type; .)
 242   =  Type<out type>                          
 243      VarList<frame, type>
 244      WEAK ";"
 245   .
 246 
 247   Type<out int type>                         
 248   =   BasicType<out type>
 249        [ "[]"                                (. type++; .)
 250        ] .
 251 
 252   BasicType<out int type>                    (. type = Types.noType; .)
 253   =   "int"                                  (. type = Types.intType; .)
 254     | "bool"                                 (. type = Types.boolType; .)
 255     | "char"                                 (. type = Types.charType; .)
 256   .
 257 
 258   VarList<StackFrame frame, int type>
 259   =  OneVar<frame, type>
 260      { WEAK "," OneVar<frame, type> }
 261   .
 262 
 263   OneVar<StackFrame frame, int type>         (. int expType;
 264                                                 Entry var = new Entry(); .)
 265   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 266                                                 var.type = type;
 267                                                 var.offset = frame.size;
 268                                                 frame.size++; .)
 269      [ AssignOp                              (. CodeGen.LoadAddress(var); .)
 270        Expression<out expType>               (. if (!Assignable(var.type, expType))
 271                                                   SemError("incompatible types in assignment");
 272                                                 progState = 1;
 273                                                 CodeGen.Assign(var.type); .)
 274      ]                                       (. Table.Insert(var); .)
 275   .
 276 
 277 
 278   AssignmentOrCall                           (. int expType;
 279                                                 DesType des; .)
 280   =  (  IF (IsCall(out des))                    // /* use resolver to handle LL(1) conflict */
 281          identifier                          (. CodeGen.FrameHeader(); .)
 282          "(" Arguments<des> ")"              (. CodeGen.Call(des.entry.entryPoint); .)
 283       |  Designator<out des>                 (. if (des.entry.kind != Kinds.Var)
 284                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 285                                                 progState = 1; .)
 286          AssignOp
 287          Expression<out expType>             (. if (!Assignable(des.type, expType))
 288                                                   SemError("incompatible types in assignment");
 289                                                 progState = 1;
 290                                                 CodeGen.Assign(des.type); .)
 291      ) WEAK ";"
 292   .
 293 
 294   Arguments<DesType des>                     (. int argCount = 0;
 295                                                 Entry fp = des.entry.firstParam; .)
 296   =  [ OneArg<fp>                            (. argCount++; if (fp != null) fp = fp.nextInScope; .)
 297        { WEAK "," OneArg<fp>                 (. argCount++; if (fp != null) fp = fp.nextInScope;.)
 298        }
 299      ]                                       (. if (argCount != des.entry.nParams)
 300                                                   SemError("wrong number of arguments"); 
 301                                                 progState = 1; .)
 302   .
 303 
 304   OneArg<Entry fp>                           (. int argType; .)
 305   =  (  Expression<out argType>              (. if (fp != null && !Assignable(fp.type, argType))
 306                                                   SemError("argument type mismatch"); 
 307                                                 progState = 1; .)
 308      )
 309   .
 310 
 311   Designator<out DesType des>                (. string name;
 312                                                 int indexType; .)
 313   =  Ident<out name>                         (. Entry entry = Table.Find(name);
 314                                                 if (!entry.declared)
 315                                                   SemError("undeclared identifier");
 316                                                 progState = 1;
 317                                                 des = new DesType(entry);
 318                                                 if (entry.kind == Kinds.Var)
 319                                                   CodeGen.LoadAddress(entry); .)
 320      [     "["                               (. if (IsArray(des.type)) des.type--;
 321                                                 else { SemError("unexpected subscript");
 322                                                   progState = 1; }
 323                                                 if (des.entry.kind != Kinds.Var) {
 324                                                   SemError("unexpected subscript");
 325                                                   progState = 1; }
 326                                                 CodeGen.Dereference(); .)
 327               Expression<out indexType>      (. if (!IsArith(indexType)) {
 328                                                   SemError("invalid subscript type");
 329                                                 progState = 1; }
 330                                                 CodeGen.Index(); .)
 331            "]"
 332      ]
 333   .
 334 
 335   IfStatement<StackFrame frame, Label endBlock>
 336                                              (. Label falseLabel = new Label(!known),
 337                                                         endElse = new Label(!known); .)
 338   =  "if" "(" Condition ")"                  (. CodeGen.BranchFalse(falseLabel); .)
 339         ["then"] Statement<frame, endBlock>  (.   CodeGen.Branch(endElse);
 340                                                 falseLabel.Here(); .)
 341      [ "else" Statement<frame, endBlock>
 342      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 343   .
 344 
 345   ElseIfStatement<StackFrame frame, Label endBlock>
 346                                              (. Label falseLabel = new Label(!known),
 347                                                         endElse = new Label(!known); .)
 348   =  "elseif" "(" Condition ")"              (. CodeGen.BranchFalse(falseLabel); .)
 349         ["then"] Statement<frame, endBlock>  (. CodeGen.Branch(endElse);
 350                                                 falseLabel.Here(); .)
 351      [ "else" Statement<frame, endBlock>
 352      | ElseIfStatement<frame, endBlock> ]    (. endElse.Here(); .)
 353   .
 354 
 355   WhileStatement<StackFrame frame>
 356                                              (. Label loopExit  = new Label(!known);
 357                                                 Label loopStart = new Label(known); .)
 358   =  "while" "(" Condition ")"               (. CodeGen.BranchFalse(loopExit); .)
 359      Statement<frame, loopExit>              (. CodeGen.Branch(loopStart);
 360                                                 loopExit.Here(); .)
 361   .
 362   
 363   DoWhileStatment<StackFrame frame>
 364                                              (. Label loopExit  = new Label(!known); 
 365                                                 Label loopStart = new Label(known); .)
 366   = "do" Statement<frame, loopExit>
 367     "while" "(" Condition ")"                (. CodeGen.BranchFalse(loopExit); .)
 368                                              (. CodeGen.Branch(loopStart); .)
 369                                              (. loopExit.Here(); .)
 370  .
 371  
 372   ForStatement<StackFrame frame>
 373                                              
 374   = "for" ( NormalFor<frame> | FancyFor<frame> ) .
 375     
 376   NormalFor<StackFrame frame>                (. Label loopExit  = new Label(!known); 
 377                                                 Label loopStart = new Label(!known); .)
 378     
 379   =  
 380     "("                                      (. string name = ""; .)
 381     ( AssignmentOrCall    
 382     | Ident<out name> WEAK ";"               (. if(Table.Find(name) == null)
 383                                                   SemError("Undeclared Identifier: " + name); .)
 384     | VarDeclarations<frame> )
 385                                              (. loopStart.Here(); .)
 386     Condition                                (. CodeGen.BranchFalse(loopExit); .)
 387     WEAK ";"
 388     AssignmentOrCall
 389     ")"
 390     Statement<frame, loopExit>               (. CodeGen.Branch(loopStart); .)
 391                                              (. loopExit.Here(); .)
 392     .
 393 
 394     FancyFor<StackFrame frame>               (. Label loopExit  = new Label(!known);
 395                                                 Label stmStart  = new Label(!known); .)
 396     =                                        (. string name = ""; Entry e; .)
 397     Ident<out name>                          (. e = Table.Find(name); .)
 398                                              (. if(e == null) .)
 399                                              (.   SemError("Undeclared Identifier: " + name); .)
 400     "in"                                     (. int exprType = Types.noType; .)
 401     "("
 402                                              (. CodeGen.LoadAddress(e); .)
 403     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 404                                              (. CodeGen.Assign(exprType); .)
 405                                              (. CodeGen.JumpAndLink(stmStart); .)
 406     { ","
 407                                              (. CodeGen.LoadAddress(e); .)
 408     Expression<out exprType>                 (. if (exprType != e.type) SemError("Type mismatch!"); .)
 409                                              (. CodeGen.Assign(exprType); .)
 410                                              (. CodeGen.writeWord(PVM.jal); .)
 411                                              (. CodeGen.writeWord(stmStart.Address()); .)
 412     }                                        (. CodeGen.Branch(loopExit); .)
 413     ")"                                      (. stmStart.Here(); .)
 414     Statement<frame, loopExit>               (. CodeGen.JumpReturnAddress(); .)
 415                                              (. loopExit.Here(); .)
 416   .
 417 
 418   HaltStatement
 419   =  "halt"
 420      [ "(" [ WriteList ] ")" ]               (. CodeGen.LeaveProgram(); .)
 421      WEAK ";"
 422   .
 423 
 424   ReturnStatement
 425   =  "return"                                (. CodeGen.LeaveVoidFunction(); .)
 426     WEAK ";"
 427   .
 428 
 429   BreakStatement<Label Lb>
 430   = "break"
 431     WEAK ";"                                 (. CodeGen.Branch(Lb); .)
 432   .
 433 
 434   ReadStatement
 435   = (   "read"     "("   ReadList   ")"
 436       | "readLine" "(" [ ReadList ] ")"      (. CodeGen.ReadLine(); .)
 437     )
 438     WEAK ";"
 439   .
 440 
 441   ReadList
 442   = ReadElement { WEAK "," ReadElement }
 443   .
 444 
 445   ReadElement                                (. string str;
 446                                                 DesType des; .)
 447   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 448     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var) {
 449                                                   SemError("wrong kind of identifier");
 450                                                   progState = 1; }
 451                                                 switch (des.type) {
 452                                                   case Types.intType:
 453                                                   case Types.charType:
 454                                                   case Types.boolType:
 455                                                     CodeGen.Read(des.type); break;
 456                                                   default:
 457                                                     SemError("cannot read this type"); progState = 1; break;
 458                                                 } .)
 459   .
 460 
 461   WriteStatement
 462   = (   "write"     "("   WriteList   ")"
 463       | "writeLine" "(" [ WriteList ] ")"    (. CodeGen.WriteLine(); .)
 464     )
 465     WEAK ";"
 466   .
 467 
 468   WriteList
 469   = WriteElement { WEAK "," WriteElement }
 470   .
 471 
 472   WriteElement                               (. int expType;
 473                                                 string str; .)
 474   =   StringConst<out str>                   (. CodeGen.WriteString(str); .)
 475     | Expression<out expType>                (. if (!IsWritable(expType)) {
 476                                                   SemError("cannot write this type"); progState = 1; }
 477                                                 switch (expType) {
 478                                                   case Types.intType:
 479                                                   case Types.boolType:
 480                                                   case Types.charType:
 481                                                     CodeGen.Write(expType); break;
 482                                                   default:
 483                                                     break;
 484                                                 } .)
 485   .
 486 
 487   Condition                                  (. int type; .)
 488   =  Expression<out type>                    (. if (!IsBool(type)) {
 489                                                   SemError("Boolean expression needed"); progState = 1; } .)
 490   .
 491 
 492   Expression<out int type>                   (. int type2;
 493                                                 int op;
 494                                                 bool comparable; .)
 495   =  AddExp<out type>
 496      [ RelOp<out op> AddExp<out type2>       (. switch (op) {
 497                                                   case CodeGen.ceq: case CodeGen.cne:
 498                                                     comparable = Compatible(type, type2);
 499                                                     break;
 500                                                   default:
 501                                                     comparable = IsArith(type) && IsArith(type2);
 502                                                     break;
 503                                                 }
 504                                                 if (!comparable) {
 505                                                   SemError("incomparable operands");
 506                                                   progState = 1; }
 507                                                 type = Types.boolType; CodeGen.Comparison(op); .)
 508      ]
 509   .
 510 
 511   AddExp<out int type>                       (. int type2;
 512                                                 int op;
 513                                                 Label shortcircuit = new Label(!known); .)
 514   =                                          (. type = Types.noType; .)
 515      (   "+" Term<out type>                  (. if (!IsArith(type)) {
 516                                                   SemError("arithmetic operand needed"); 
 517                                                   progState = 1; } .)
 518        | "-" Term<out type>                  (. if (!IsArith(type)) {
 519                                                   SemError("arithmetic operand needed");
 520                                                   progState = 1; }
 521                                                 CodeGen.NegateInteger(); .)
 522        | Term<out type>
 523      )
 524      { AddOp<out op>                         (. if (op == CodeGen.or)
 525                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.or); .)
 526        Term<out type2>                       (. switch (op) {
 527                                                   case CodeGen.or:
 528                                                     if (!IsBool(type) || !IsBool(type2)) {
 529                                                       SemError("boolean operands needed"); 
 530                                                       progState = 1; }
 531                                                     type = Types.boolType;
 532                                                     break;
 533                                                   case CodeGen.add:
 534                                                     if((!IsArith(type) && !IsChar(type))
 535                                                     || (!IsArith(type2) && !IsChar(type2))) {
 536                                                       SemError("operand must be of type int or type char");
 537                                                       progState = 1; }
 538                                                     type = IsChar(type) && IsChar(type2) ? Types.charType : Types.intType; 
 539                                                     CodeGen.BinaryOp(op);
 540                                                     break;
 541                                                   default:
 542                                                     if (!IsArith(type) || !IsArith(type2)) {
 543                                                       SemError("arithmetic operands needed");
 544                                                       type = Types.noType;
 545                                                       progState = 1;
 546                                                     }
 547                                                     CodeGen.BinaryOp(op);
 548                                                     break;
 549                                                 } .)
 550      }                                       (. shortcircuit.Here(); .)
 551   .
 552 
 553   Term<out int type>                         (. int type2;
 554                                                 int op;
 555                                                 Label shortcircuit = new Label(!known); .)
 556   =  Factor<out type>
 557      { MulOp<out op>                         (. if (op == CodeGen.and)
 558                                                   CodeGen.BooleanOp(shortcircuit, CodeGen.and); .)
 559        Factor<out type2>                     (. switch (op) {
 560                                                   case CodeGen.and:
 561                                                     if (!IsBool(type) || !IsBool(type2)) {
 562                                                       SemError("boolean operands needed"); progState = 1; }
 563                                                     type = Types.boolType;
 564                                                     break;
 565                                                   default:
 566                                                     if (!IsArith(type) || !IsArith(type2)) {
 567                                                       SemError("arithmetic operands needed");
 568                                                       type = Types.noType;
 569                                                       progState = 1;
 570                                                     }
 571                                                     CodeGen.BinaryOp(op);
 572                                                     break;
 573                                                 } .)
 574      }                                       (. shortcircuit.Here(); .)
 575   .
 576 
 577   Factor<out int type>                       (. type = Types.noType;
 578                                                 int size;
 579                                                 DesType des;
 580                                                 ConstRec con; .)
 581   =    Designator<out des>                   (. type = des.type;
 582                                                 switch (des.entry.kind) {
 583                                                   case Kinds.Var:
 584                                                     CodeGen.Dereference();
 585                                                     break;
 586                                                   case Kinds.Con:
 587                                                     CodeGen.LoadConstant(des.entry.value);
 588                                                     break;
 589                                                   default:
 590                                                     SemError("wrong kind of identifier");
 591                                                     progState = 1;
 592                                                     break;
 593                                                 } .)
 594                                         
 595      | Constant<out con>                     (. type = con.type;
 596                                                 CodeGen.LoadConstant(con.value); .)
 597      | "new" BasicType<out type>             (. type++; .)
 598          "[" Expression<out size>            (. if (!IsArith(size)){
 599                                                   SemError("array size must be integer");
 600                                                   progState = 1; }
 601                                                 CodeGen.Allocate(); .)
 602          "]"
 603      | "!" Factor<out type>                  (. if (!IsBool(type)) { SemError("boolean operand needed"); progState = 1; } 
 604                                                 else CodeGen.NegateBoolean();
 605                                                 type = Types.boolType; .)
 606      | "(" Expression<out type> ")"
 607   .
 608 
 609   AddOp<out int op>                          (. op = CodeGen.nop; .)
 610   =    "+"                                   (. op = CodeGen.add; .)
 611      | "-"                                   (. op = CodeGen.sub; .)
 612      | "||"                                  (. op = CodeGen.or;  .)
 613   .
 614 
 615   MulOp<out int op>                          (. op = CodeGen.nop; .)
 616   =    "*"                                   (. op = CodeGen.mul; .)
 617      | "/"                                   (. op = CodeGen.div; .)
 618      | "%"                                   (. op = CodeGen.rem; .)
 619      | "&&"                                  (. op = CodeGen.and; .)
 620   .
 621 
 622   RelOp<out int op>                          (. op = CodeGen.nop; .)
 623   =    "=="                                  (. op = CodeGen.ceq; .)
 624      | "!="                                  (. op = CodeGen.cne; .)
 625      | "<"                                   (. op = CodeGen.clt; .)
 626      | "<="                                  (. op = CodeGen.cle; .)
 627      | ">"                                   (. op = CodeGen.cgt; .)
 628      | ">="                                  (. op = CodeGen.cge; .)
 629   .
 630 
 631   AssignOp = "=" .
 632 
 633   Ident<out string name>
 634   =  identifier                              (. name = token.val; .)
 635   .
 636 
 637   StringConst<out string str>
 638   =  stringLit                               (. str = token.val; .)
 639      { ["+"] stringLit                       (. str = str.Substring(0, str.Length - 1) + token.val.Substring(1, token.val.Length - 1); .)
 640      }
 641                                              (. str = Unescape(str.Substring(1, str.Length - 2)); .)
 642   .
 643 
 644   CharConst<out int value>
 645   =  charLit                                 (. string str = token.val;
 646                                                 str = Unescape(str.Substring(1, str.Length - 2));
 647                                                 value = (int) str[0]; .)
 648   .
 649 
 650   IntConst<out int value>
 651   =  number                                  (. try {
 652                                                   value = Convert.ToInt32(token.val);
 653                                                 } catch (Exception) {
 654                                                   value = 0; SemError("number out of range"); progState = 1;
 655                                                 } .)
 656   .
 657 
 658 END Parva.
 659 

0 errors detected
7 warnings detected
